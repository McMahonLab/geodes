ave.sig.p.table$phase <- factor(ave.sig.p.table$phase, levels = c("4", "8", "12", "16", "20", "24"))
day.night.boxes <- data.frame(x1 = c(0, 0.53, 15.35, 24.53, 39.35), x2 = c(0.53, 15.53, 24.53, 39.53, 44), y1 = rep(min(ave.sig.p.table$value), 5), y2 = rep(max(ave.sig.p.table$value), 5), labels = c("", "Sunrise", "Sunset", "Sunrise", "Sunset"))
#p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes), color = "grey") + stat_summary(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value), fun.y=mean, geom="line", colour="red") + scale_x_continuous(breaks = seq(0,44, by = 4)) + labs(x = "Hours into Time Series", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none")
colors <- c("#4575b4", "#d73027", "#fc8d59", "#fee090", "#e0f3f8", "#91bfdb")
phases <- c("4", "8", "12", "16", "20", "24")
p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes, color = phase)) + scale_x_continuous(breaks = seq(0,44, by = 4), labels = c("0" = "5:00", "4" = "9:00", "8" = "13:00", "12" = "17:00", "16" = "21:00", "18" = "1:00", "24" = "5:00", "28" = "9:00", "32" = "13:00", "36" = "17:00", "40" = "21:00", "44" = "1:00")) + labs(x = "Time", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none") + scale_color_manual(values = colors[which(phases %in% unique(ave.sig.p.table$phase))], name = "Peak", labels = c("4" = "5:00", "8" = "9:00", "12" = "13:00", "16" = "17:00", "20" = "21:00", "24" = "1:00"))
return(p)
}
cycle1 <- cycle_plot("Photosynthesis", "Mendota")
#cycle2 <- cycle_plot("ROS", "Mendota")
#cycle3 <- cycle_plot("Rhodopsin", "Mendota")
save_plot(paste(path,"geodes/Manuscript/figures_and_tables/cyclic_trends.pdf", sep = ""),  cycle1, base_aspect_ratio = 2, base_height = 4)
cycle1
colors <- c("#4575b4", "#d73027", "#fc8d59", "#fee090", "#e0f3f8", "#91bfdb")
phases <- c("4", "8", "12", "16", "20", "24")
p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes)) + scale_x_continuous(breaks = seq(0,44, by = 4), labels = c("0" = "5:00", "4" = "9:00", "8" = "13:00", "12" = "17:00", "16" = "21:00", "18" = "1:00", "24" = "5:00", "28" = "9:00", "32" = "13:00", "36" = "17:00", "40" = "21:00", "44" = "1:00")) + labs(x = "Time", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none") + scale_color_manual(values = colors[which(phases %in% unique(ave.sig.p.table$phase))], name = "Peak", labels = c("4" = "5:00", "8" = "9:00", "12" = "13:00", "16" = "17:00", "20" = "21:00", "24" = "1:00"))
day.night.boxes
cycle_plot <- function(type, lake) {
if(lake == "Mendota") {
abuntable <- abun_mnorm
}else if(lake == "Trout"){
abuntable <- abun_tnorm
}else if (lake == "Sparkling"){
abuntable <- abun_snorm
}
p.genes <- as.character(sig.res.key$Gene[which(sig.res.key$Category == type)])
p.table <- abuntable[match(p.genes, rownames(abuntable)),]
p.results <- rain(t(p.table), deltat = 4, period = 24, measure.sequence = table(metadata$Timepoint[match(colnames(p.table), metadata$Sample)]), verbose = T, adjp.method = "Bonferroni")
# sig.p.table <- p.table[which(p.results$pVal < 0.05 & p.results$phase == 12), ]
sig.p.table <- p.table[which(p.results$pVal < 0.05), ]
sig.p.table <- as.data.frame(t(apply(sig.p.table, 1, zscore)))
sig.p.table$Genes <- rownames(sig.p.table)
melt.sig.p.table <- melt(sig.p.table)
melt.sig.p.table$Timepoint <- metadata$Timepoint[match(melt.sig.p.table$variable, metadata$Sample)]
ave.sig.p.table <- aggregate(value ~ Genes + Timepoint, melt.sig.p.table, mean)
ave.sig.p.table$phase <- p.results$phase[match(ave.sig.p.table$Genes, rownames(p.results))]
ave.sig.p.table$phase <- factor(ave.sig.p.table$phase, levels = c("4", "8", "12", "16", "20", "24"))
day.night.boxes <- data.frame(x1 = c(0, 0.53, 15.35, 24.53, 39.35), x2 = c(0.53, 15.53, 24.53, 39.53, 44), y1 = rep(min(ave.sig.p.table$value), 5), y2 = rep(max(ave.sig.p.table$value), 5), labels = c("", "Sunrise", "Sunset", "Sunrise", "Sunset"))
#p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes), color = "grey") + stat_summary(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value), fun.y=mean, geom="line", colour="red") + scale_x_continuous(breaks = seq(0,44, by = 4)) + labs(x = "Hours into Time Series", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none")
colors <- c("#4575b4", "#d73027", "#fc8d59", "#fee090", "#e0f3f8", "#91bfdb")
phases <- c("4", "8", "12", "16", "20", "24")
p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes)) + scale_x_continuous(breaks = seq(0,44, by = 4), labels = c("0" = "5:00", "4" = "9:00", "8" = "13:00", "12" = "17:00", "16" = "21:00", "18" = "1:00", "24" = "5:00", "28" = "9:00", "32" = "13:00", "36" = "17:00", "40" = "21:00", "44" = "1:00")) + labs(x = "Time", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none") + scale_color_manual(values = colors[which(phases %in% unique(ave.sig.p.table$phase))], name = "Peak", labels = c("4" = "5:00", "8" = "9:00", "12" = "13:00", "16" = "17:00", "20" = "21:00", "24" = "1:00"))
return(p)
}
cycle1 <- cycle_plot("Photosynthesis", "Mendota")
cycle1
# Write a function to plot a given category
cycle_plot <- function(type, lake) {
if(lake == "Mendota") {
abuntable <- abun_mnorm
}else if(lake == "Trout"){
abuntable <- abun_tnorm
}else if (lake == "Sparkling"){
abuntable <- abun_snorm
}
p.genes <- as.character(sig.res.key$Gene[which(sig.res.key$Category == type)])
p.table <- abuntable[match(p.genes, rownames(abuntable)),]
p.results <- rain(t(p.table), deltat = 4, period = 24, measure.sequence = table(metadata$Timepoint[match(colnames(p.table), metadata$Sample)]), verbose = T, adjp.method = "Bonferroni")
# sig.p.table <- p.table[which(p.results$pVal < 0.05 & p.results$phase == 12), ]
sig.p.table <- p.table[which(p.results$pVal < 0.05), ]
sig.p.table <- as.data.frame(t(apply(sig.p.table, 1, zscore)))
sig.p.table$Genes <- rownames(sig.p.table)
melt.sig.p.table <- melt(sig.p.table)
melt.sig.p.table$Timepoint <- metadata$Timepoint[match(melt.sig.p.table$variable, metadata$Sample)]
ave.sig.p.table <- aggregate(value ~ Genes + Timepoint, melt.sig.p.table, mean)
ave.sig.p.table$phase <- p.results$phase[match(ave.sig.p.table$Genes, rownames(p.results))]
ave.sig.p.table$phase <- factor(ave.sig.p.table$phase, levels = c("4", "8", "12", "16", "20", "24"))
day.night.boxes <- data.frame(x1 = c(0, 0.53, 15.35, 24.53, 39.35), x2 = c(0.53, 15.53, 24.53, 39.53, 44), y1 = rep(min(ave.sig.p.table$value), 5), y2 = rep(max(ave.sig.p.table$value), 5), labels = c("", "Sunrise", "Sunset", "Sunrise", "Sunset"))
#p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes), color = "grey") + stat_summary(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value), fun.y=mean, geom="line", colour="red") + scale_x_continuous(breaks = seq(0,44, by = 4)) + labs(x = "Hours into Time Series", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none")
colors <- c("#4575b4", "#d73027", "#fc8d59", "#fee090", "#e0f3f8", "#91bfdb")
phases <- c("4", "8", "12", "16", "20", "24")
p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes), alpha = 0.5) + scale_x_continuous(breaks = seq(0,44, by = 4), labels = c("0" = "5:00", "4" = "9:00", "8" = "13:00", "12" = "17:00", "16" = "21:00", "18" = "1:00", "24" = "5:00", "28" = "9:00", "32" = "13:00", "36" = "17:00", "40" = "21:00", "44" = "1:00")) + labs(x = "Time", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none") + scale_color_manual(values = colors[which(phases %in% unique(ave.sig.p.table$phase))], name = "Peak", labels = c("4" = "5:00", "8" = "9:00", "12" = "13:00", "16" = "17:00", "20" = "21:00", "24" = "1:00"))
return(p)
}
cycle1 <- cycle_plot("Photosynthesis", "Mendota")
#cycle2 <- cycle_plot("ROS", "Mendota")
cycle1
cycle_plot <- function(type, lake) {
if(lake == "Mendota") {
abuntable <- abun_mnorm
}else if(lake == "Trout"){
abuntable <- abun_tnorm
}else if (lake == "Sparkling"){
abuntable <- abun_snorm
}
p.genes <- as.character(sig.res.key$Gene[which(sig.res.key$Category == type)])
p.table <- abuntable[match(p.genes, rownames(abuntable)),]
p.results <- rain(t(p.table), deltat = 4, period = 24, measure.sequence = table(metadata$Timepoint[match(colnames(p.table), metadata$Sample)]), verbose = T, adjp.method = "Bonferroni")
# sig.p.table <- p.table[which(p.results$pVal < 0.05 & p.results$phase == 12), ]
sig.p.table <- p.table[which(p.results$pVal < 0.05), ]
sig.p.table <- as.data.frame(t(apply(sig.p.table, 1, zscore)))
sig.p.table$Genes <- rownames(sig.p.table)
melt.sig.p.table <- melt(sig.p.table)
melt.sig.p.table$Timepoint <- metadata$Timepoint[match(melt.sig.p.table$variable, metadata$Sample)]
ave.sig.p.table <- aggregate(value ~ Genes + Timepoint, melt.sig.p.table, mean)
ave.sig.p.table$phase <- p.results$phase[match(ave.sig.p.table$Genes, rownames(p.results))]
ave.sig.p.table$phase <- factor(ave.sig.p.table$phase, levels = c("4", "8", "12", "16", "20", "24"))
day.night.boxes <- data.frame(x1 = c(0, 0.53, 15.35, 24.53, 39.35), x2 = c(0.53, 15.53, 24.53, 39.53, 44), y1 = rep(min(ave.sig.p.table$value), 5), y2 = rep(max(ave.sig.p.table$value), 5), labels = c("", "Sunrise", "Sunset", "Sunrise", "Sunset"))
#p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes), color = "grey") + stat_summary(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value), fun.y=mean, geom="line", colour="red") + scale_x_continuous(breaks = seq(0,44, by = 4)) + labs(x = "Hours into Time Series", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none")
colors <- c("#4575b4", "#d73027", "#fc8d59", "#fee090", "#e0f3f8", "#91bfdb")
phases <- c("4", "8", "12", "16", "20", "24")
p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes, color = phase)) + scale_x_continuous(breaks = seq(0,44, by = 4), labels = c("0" = "5:00", "4" = "9:00", "8" = "13:00", "12" = "17:00", "16" = "21:00", "18" = "1:00", "24" = "5:00", "28" = "9:00", "32" = "13:00", "36" = "17:00", "40" = "21:00", "44" = "1:00")) + labs(x = "Time", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none") + scale_color_manual(values = colors[which(phases %in% unique(ave.sig.p.table$phase))], name = "Peak", labels = c("4" = "5:00", "8" = "9:00", "12" = "13:00", "16" = "17:00", "20" = "21:00", "24" = "1:00"))
return(p)
}
cycle1 <- cycle_plot("Photosynthesis", "Mendota")
cycle1
cycle2 <- cycle_plot("Photosynthesis", "Sparkling")
tnorm <- read.csv(paste(path, "geodes_data_tables/Trout_ID90_normalized_readcounts.csv", sep = ""), header = T, row.names = 1)
tnorm <- tnorm[, which(colnames(tnorm) != "GEODES065.nonrRNA")]
colnames(tnorm) <- gsub(".nonrRNA", "", colnames(tnorm))
trout_key <- read.csv(paste(path, "geodes_data_tables/Trout_ID90_genekey_geneclassifications_2018-11-28.csv", sep = ""), header = T)
snorm <- read.csv(paste(path, "geodes_data_tables/Sparkling_ID90_normalized_readcounts.csv", sep = ""), header = T, row.names = 1)
snorm <- snorm[, which(colnames(snorm) != "GEODES014.nonrRNA" & colnames(snorm) != "GEODES033.nonrRNA")]
colnames(snorm) <- gsub(".nonrRNA", "", colnames(snorm))
spark_key <- read.csv(paste(path, "geodes_data_tables/Sparkling_ID90_genekey_geneclassifications_2018-11-28.csv", sep = ""), header = T)
abun_mnorm <- mnorm[order(rowSums(mnorm), decreasing = T), ]
abun_mnorm <- abun_mnorm[1:20000,]
colnames(abun_mnorm) <- gsub(".nonrRNA", "", colnames(abun_mnorm))
abun_tnorm <- tnorm[order(rowSums(tnorm), decreasing = T), ]
abun_tnorm <- abun_tnorm[1:20000,]
colnames(abun_tnorm) <- gsub(".nonrRNA", "", colnames(abun_tnorm))
abun_snorm <- snorm[order(rowSums(snorm), decreasing = T), ]
abun_snorm <- abun_snorm[1:20000,]
colnames(abun_snorm) <- gsub(".nonrRNA", "", colnames(abun_snorm))
# Write a function to plot a given category
cycle_plot <- function(type, lake) {
if(lake == "Mendota") {
abuntable <- abun_mnorm
}else if(lake == "Trout"){
abuntable <- abun_tnorm
}else if (lake == "Sparkling"){
abuntable <- abun_snorm
}
p.genes <- as.character(sig.res.key$Gene[which(sig.res.key$Category == type)])
p.table <- abuntable[match(p.genes, rownames(abuntable)),]
p.results <- rain(t(p.table), deltat = 4, period = 24, measure.sequence = table(metadata$Timepoint[match(colnames(p.table), metadata$Sample)]), verbose = T, adjp.method = "Bonferroni")
# sig.p.table <- p.table[which(p.results$pVal < 0.05 & p.results$phase == 12), ]
sig.p.table <- p.table[which(p.results$pVal < 0.05), ]
sig.p.table <- as.data.frame(t(apply(sig.p.table, 1, zscore)))
sig.p.table$Genes <- rownames(sig.p.table)
melt.sig.p.table <- melt(sig.p.table)
melt.sig.p.table$Timepoint <- metadata$Timepoint[match(melt.sig.p.table$variable, metadata$Sample)]
ave.sig.p.table <- aggregate(value ~ Genes + Timepoint, melt.sig.p.table, mean)
ave.sig.p.table$phase <- p.results$phase[match(ave.sig.p.table$Genes, rownames(p.results))]
ave.sig.p.table$phase <- factor(ave.sig.p.table$phase, levels = c("4", "8", "12", "16", "20", "24"))
day.night.boxes <- data.frame(x1 = c(0, 0.53, 15.35, 24.53, 39.35), x2 = c(0.53, 15.53, 24.53, 39.53, 44), y1 = rep(min(ave.sig.p.table$value), 5), y2 = rep(max(ave.sig.p.table$value), 5), labels = c("", "Sunrise", "Sunset", "Sunrise", "Sunset"))
#p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes), color = "grey") + stat_summary(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value), fun.y=mean, geom="line", colour="red") + scale_x_continuous(breaks = seq(0,44, by = 4)) + labs(x = "Hours into Time Series", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none")
colors <- c("#4575b4", "#d73027", "#fc8d59", "#fee090", "#e0f3f8", "#91bfdb")
phases <- c("4", "8", "12", "16", "20", "24")
p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes, color = phase)) + scale_x_continuous(breaks = seq(0,44, by = 4), labels = c("0" = "5:00", "4" = "9:00", "8" = "13:00", "12" = "17:00", "16" = "21:00", "18" = "1:00", "24" = "5:00", "28" = "9:00", "32" = "13:00", "36" = "17:00", "40" = "21:00", "44" = "1:00")) + labs(x = "Time", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none") + scale_color_manual(values = colors[which(phases %in% unique(ave.sig.p.table$phase))], name = "Peak", labels = c("4" = "5:00", "8" = "9:00", "12" = "13:00", "16" = "17:00", "20" = "21:00", "24" = "1:00"))
return(p)
}
cycle1 <- cycle_plot("Photosynthesis", "Mendota")
cycle2 <- cycle_plot("Photosynthesis", "Sparkling")
cycle3 <- cycle_plot("Photosynthesis", "TRout")
cycle3 <- cycle_plot("Photosynthesis", "Trout")
cycle2
cycle3
plot_grid(cycle1, cycle2, cycle3, nrow = 3, labels = c("A", "B", "C"))
x <- plot_grid(cycle1, cycle2, cycle3, nrow = 3, labels = c("A", "B", "C"))
plot(x)
abun_table <- abun_snorm
abun_mnorm <- mnorm[order(rowSums(mnorm), decreasing = T), ]
abun_mnorm <- abun_mnorm[1:20000,]
colnames(abun_mnorm) <- gsub(".nonrRNA", "", colnames(abun_mnorm))
input <- as.matrix(abun_mnorm)
input <- input/100
input <- round(input, digits = 0)
conditions <- metadata$Time[match(colnames(abun_mnorm), metadata$Sample)]
conditions[which(conditions == 9 | conditions == 13 | conditions == 17)] <- "day"
conditions[which(conditions == 5 | conditions == 21 | conditions == 1)] <- "night"
coldata <- data.frame(samples = colnames(abun_mnorm), conditions)
cds <- DESeqDataSetFromMatrix(countData = input,
colData = coldata,
design = ~ conditions)
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
dds <- DESeq(cds)
res <- results(dds)
reskey <- mendota_key[match(rownames(res), mendota_key$Gene), ]
sig.res.key <- reskey[which(res$padj < 0.05),]
# Make column by certain key words
sig.res.key$Category <- "None"
sig.res.key$Category[grep("photo|Photo", sig.res.key$Product)] <- "Photosynthesis"
sig.res.key$Category[grep("rhodopsin|Rhodopsin|phytoene|lycopene|carotene|Phytoene|Lycopene|Carotene", sig.res.key$Product)] <- "Rhodopsin"
# sig.res.key$Category[grep("sugar|Sugar|ribose|Ribose|hexose|maltose|carbohydrate|Carbohydrate|ose transport", sig.res.key$Product)] <- "Sugar degradation"
sig.res.key$Category[grep("rbcL|ribulose-bisphosphate carboxylase", sig.res.key$Product)] <- "RuBisCO"
sig.res.key$Category[grep("putrescine|Putrescine|spermidine|Spermidine", sig.res.key$Product)] <- "Polyamines"
sig.res.key$Category[grep("citrate lyase|Citrate lyase", sig.res.key$Product)] <- "rTCA"
sig.res.key$Category[grep("nitrogenase|Nitrogenase|NifH|NifD|NifK", sig.res.key$Product)] <- "Nitrogenase"
sig.res.key$Category[grep("Chitobiase|chitobiase|chitinase|Chitinase", sig.res.key$Product)] <- "Chitinase"
sig.res.key$Category[grep("glycoside hydrolase|Glycoside hydrolase|glycosyl hydrolase", sig.res.key$Product)] <- "Glycoside_Hydrolase"
sig.res.key$Category[grep("alkaline phosphatase|Alkaline phosphatase", sig.res.key$Product)] <- "Alkaline_phosphatase"
sig.res.key$Category[grep("cellulase|cellulose", sig.res.key$Product)] <- "Cellulase"
sig.res.key$Category[grep("peroxidase|peroxide|catalase", sig.res.key$Product)] <- "ROS"
sig.res.key$Category[grep("ammonia monooxygenase|methane monoxygenase", sig.res.key$Product)] <- "Methane/Ammonia"
sig.res.key$Category[grep("nitrite reductase|Nitrite reductase|nitrite oxidoreductase|Nitrite oxidoreductase", sig.res.key$Product)] <- "Nitrite_reduction"
sig.res.key$Category[grep("urease", sig.res.key$Product)] <- "Urease"
sig.res.key$Category[grep("protease", sig.res.key$Product)] <- "Protease"
sig.res.key$Category[grep("carboxylate transport", sig.res.key$Product)] <- "Carboxylate transport"
sig.res.key$Category[grep("ribose transport", sig.res.key$Product)] <- "Ribose transport"
sig.res.key$Category[grep("sugar transport|carbohydrate ABC transport|Carbohydrate-selective porin", sig.res.key$Product)] <- "General sugar transport"
sig.res.key$Category[grep("raffinose/stachyose/melibiose transport", sig.res.key$Product)] <- "Raffinose/stachyose/melibiose transport"
sig.res.key$Category[grep("glucose/mannose transport", sig.res.key$Product)] <- "Glucose/mannose transport"
sig.res.key$Category[grep("rhamnose transport", sig.res.key$Product)] <- "Rhamnose transport"
sig.res.key$Category[grep("xylose transport", sig.res.key$Product)] <- "Xylose transport"
sig.res.key$Category[grep("fructose transport", sig.res.key$Product)] <- "Fructose transport"
sig.res.key$Category[grep("chitobiose transport", sig.res.key$Product)] <- "Chitobiose transport"
sig.res.key$Category[grep("lactose/L-arabinose transport", sig.res.key$Product)] <- "Lactose/arabinose transport"
mendota.sig.res.key <- sig.res.key
abun_snorm <- snorm[order(rowSums(snorm), decreasing = T), ]
abun_snorm <- abun_snorm[1:20000,]
colnames(abun_snorm) <- gsub(".nonrRNA", "", colnames(abun_snorm))
input <- as.matrix(abun_snorm)
input <- input/100
input <- round(input, digits = 0)
conditions <- metadata$Time[match(colnames(abun_snorm), metadata$Sample)]
conditions[which(conditions == 9 | conditions == 13 | conditions == 17)] <- "day"
conditions[which(conditions == 5 | conditions == 21 | conditions == 1)] <- "night"
coldata <- data.frame(samples = colnames(abun_snorm), conditions)
cds <- DESeqDataSetFromMatrix(countData = input,
colData = coldata,
design = ~ conditions)
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
dds <- DESeq(cds)
res <- results(dds)
reskey <- spark_key[match(rownames(res), spark_key$Gene), ]
sig.res.key <- reskey[which(res$padj < 0.05),]
# Make column by certain key words
sig.res.key$Category <- "None"
sig.res.key$Category[grep("photo|Photo", sig.res.key$Product)] <- "Photosynthesis"
sig.res.key$Category[grep("rhodopsin|Rhodopsin|phytoene|lycopene|carotene|Phytoene|Lycopene|Carotene", sig.res.key$Product)] <- "Rhodopsin"
# sig.res.key$Category[grep("sugar|Sugar|ribose|Ribose|hexose|maltose|carbohydrate|Carbohydrate|ose transport", sig.res.key$Product)] <- "Sugar degradation"
sig.res.key$Category[grep("rbcL|ribulose-bisphosphate carboxylase", sig.res.key$Product)] <- "RuBisCO"
sig.res.key$Category[grep("putrescine|Putrescine|spermidine|Spermidine", sig.res.key$Product)] <- "Polyamines"
sig.res.key$Category[grep("citrate lyase|Citrate lyase", sig.res.key$Product)] <- "rTCA"
sig.res.key$Category[grep("nitrogenase|Nitrogenase|NifH|NifD|NifK", sig.res.key$Product)] <- "Nitrogenase"
sig.res.key$Category[grep("Chitobiase|chitobiase|chitinase|Chitinase", sig.res.key$Product)] <- "Chitinase"
sig.res.key$Category[grep("glycoside hydrolase|Glycoside hydrolase|glycosyl hydrolase", sig.res.key$Product)] <- "Glycoside_Hydrolase"
sig.res.key$Category[grep("alkaline phosphatase|Alkaline phosphatase", sig.res.key$Product)] <- "Alkaline_phosphatase"
sig.res.key$Category[grep("cellulase|cellulose", sig.res.key$Product)] <- "Cellulase"
sig.res.key$Category[grep("peroxidase|peroxide|catalase", sig.res.key$Product)] <- "ROS"
sig.res.key$Category[grep("ammonia monooxygenase|methane monoxygenase", sig.res.key$Product)] <- "Methane/Ammonia"
sig.res.key$Category[grep("nitrite reductase|Nitrite reductase|nitrite oxidoreductase|Nitrite oxidoreductase", sig.res.key$Product)] <- "Nitrite_reduction"
sig.res.key$Category[grep("urease", sig.res.key$Product)] <- "Urease"
sig.res.key$Category[grep("protease", sig.res.key$Product)] <- "Protease"
sig.res.key$Category[grep("carboxylate transport", sig.res.key$Product)] <- "Carboxylate transport"
sig.res.key$Category[grep("ribose transport", sig.res.key$Product)] <- "Ribose transport"
sig.res.key$Category[grep("sugar transport|carbohydrate ABC transport|Carbohydrate-selective porin", sig.res.key$Product)] <- "General sugar transport"
sig.res.key$Category[grep("raffinose/stachyose/melibiose transport", sig.res.key$Product)] <- "Raffinose/stachyose/melibiose transport"
sig.res.key$Category[grep("glucose/mannose transport", sig.res.key$Product)] <- "Glucose/mannose transport"
sig.res.key$Category[grep("rhamnose transport", sig.res.key$Product)] <- "Rhamnose transport"
sig.res.key$Category[grep("xylose transport", sig.res.key$Product)] <- "Xylose transport"
sig.res.key$Category[grep("fructose transport", sig.res.key$Product)] <- "Fructose transport"
sig.res.key$Category[grep("chitobiose transport", sig.res.key$Product)] <- "Chitobiose transport"
sig.res.key$Category[grep("lactose/L-arabinose transport", sig.res.key$Product)] <- "Lactose/arabinose transport"
spark.sig.res.key <- sig.res.key
abun_tnorm <- tnorm[order(rowSums(tnorm), decreasing = T), ]
abun_tnorm <- abun_tnorm[1:20000,]
colnames(abun_tnorm) <- gsub(".nonrRNA", "", colnames(abun_tnorm))
input <- as.matrix(abun_tnorm)
input <- input/100
input <- round(input, digits = 0)
conditions <- metadata$Time[match(colnames(abun_tnorm), metadata$Sample)]
conditions[which(conditions == 9 | conditions == 13 | conditions == 17)] <- "day"
conditions[which(conditions == 5 | conditions == 21 | conditions == 1)] <- "night"
coldata <- data.frame(samples = colnames(abun_tnorm), conditions)
cds <- DESeqDataSetFromMatrix(countData = input,
colData = coldata,
design = ~ conditions)
abun_tnorm <- tnorm[order(rowSums(tnorm), decreasing = T), ]
abun_tnorm <- abun_tnorm[1:20000,]
colnames(abun_tnorm) <- gsub(".nonrRNA", "", colnames(abun_tnorm))
input <- as.matrix(abun_tnorm)
input <- input/500
input <- round(input, digits = 0)
conditions <- metadata$Time[match(colnames(abun_tnorm), metadata$Sample)]
conditions[which(conditions == 9 | conditions == 13 | conditions == 17)] <- "day"
conditions[which(conditions == 5 | conditions == 21 | conditions == 1)] <- "night"
coldata <- data.frame(samples = colnames(abun_tnorm), conditions)
cds <- DESeqDataSetFromMatrix(countData = input,
colData = coldata,
design = ~ conditions)
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
dds <- DESeq(cds)
res <- results(dds)
reskey <- trout_key[match(rownames(res), trout_key$Gene), ]
sig.res.key <- reskey[which(res$padj < 0.05),]
# Make column by certain key words
sig.res.key$Category <- "None"
sig.res.key$Category[grep("photo|Photo", sig.res.key$Product)] <- "Photosynthesis"
sig.res.key$Category[grep("rhodopsin|Rhodopsin|phytoene|lycopene|carotene|Phytoene|Lycopene|Carotene", sig.res.key$Product)] <- "Rhodopsin"
# sig.res.key$Category[grep("sugar|Sugar|ribose|Ribose|hexose|maltose|carbohydrate|Carbohydrate|ose transport", sig.res.key$Product)] <- "Sugar degradation"
sig.res.key$Category[grep("rbcL|ribulose-bisphosphate carboxylase", sig.res.key$Product)] <- "RuBisCO"
sig.res.key$Category[grep("putrescine|Putrescine|spermidine|Spermidine", sig.res.key$Product)] <- "Polyamines"
sig.res.key$Category[grep("citrate lyase|Citrate lyase", sig.res.key$Product)] <- "rTCA"
sig.res.key$Category[grep("nitrogenase|Nitrogenase|NifH|NifD|NifK", sig.res.key$Product)] <- "Nitrogenase"
sig.res.key$Category[grep("Chitobiase|chitobiase|chitinase|Chitinase", sig.res.key$Product)] <- "Chitinase"
sig.res.key$Category[grep("glycoside hydrolase|Glycoside hydrolase|glycosyl hydrolase", sig.res.key$Product)] <- "Glycoside_Hydrolase"
sig.res.key$Category[grep("alkaline phosphatase|Alkaline phosphatase", sig.res.key$Product)] <- "Alkaline_phosphatase"
sig.res.key$Category[grep("cellulase|cellulose", sig.res.key$Product)] <- "Cellulase"
sig.res.key$Category[grep("peroxidase|peroxide|catalase", sig.res.key$Product)] <- "ROS"
sig.res.key$Category[grep("ammonia monooxygenase|methane monoxygenase", sig.res.key$Product)] <- "Methane/Ammonia"
sig.res.key$Category[grep("nitrite reductase|Nitrite reductase|nitrite oxidoreductase|Nitrite oxidoreductase", sig.res.key$Product)] <- "Nitrite_reduction"
sig.res.key$Category[grep("urease", sig.res.key$Product)] <- "Urease"
sig.res.key$Category[grep("protease", sig.res.key$Product)] <- "Protease"
sig.res.key$Category[grep("carboxylate transport", sig.res.key$Product)] <- "Carboxylate transport"
sig.res.key$Category[grep("ribose transport", sig.res.key$Product)] <- "Ribose transport"
sig.res.key$Category[grep("sugar transport|carbohydrate ABC transport|Carbohydrate-selective porin", sig.res.key$Product)] <- "General sugar transport"
sig.res.key$Category[grep("raffinose/stachyose/melibiose transport", sig.res.key$Product)] <- "Raffinose/stachyose/melibiose transport"
sig.res.key$Category[grep("glucose/mannose transport", sig.res.key$Product)] <- "Glucose/mannose transport"
sig.res.key$Category[grep("rhamnose transport", sig.res.key$Product)] <- "Rhamnose transport"
sig.res.key$Category[grep("xylose transport", sig.res.key$Product)] <- "Xylose transport"
sig.res.key$Category[grep("fructose transport", sig.res.key$Product)] <- "Fructose transport"
sig.res.key$Category[grep("chitobiose transport", sig.res.key$Product)] <- "Chitobiose transport"
sig.res.key$Category[grep("lactose/L-arabinose transport", sig.res.key$Product)] <- "Lactose/arabinose transport"
trout.sig.res.key <- sig.res.key
cycle_plot <- function(type, lake) {
if(lake == "Mendota") {
abuntable <- abun_mnorm
sig.res.key <- mendota.sig.res.key
}else if(lake == "Trout"){
abuntable <- abun_tnorm
sig.res.key <- trout.sig.res.key
}else if (lake == "Sparkling"){
abuntable <- abun_snorm
sig.res.key <- spark.sig.res.key
}
p.genes <- as.character(sig.res.key$Gene[which(sig.res.key$Category == type)])
p.table <- abuntable[match(p.genes, rownames(abuntable)),]
p.results <- rain(t(p.table), deltat = 4, period = 24, measure.sequence = table(metadata$Timepoint[match(colnames(p.table), metadata$Sample)]), verbose = T, adjp.method = "Bonferroni")
# sig.p.table <- p.table[which(p.results$pVal < 0.05 & p.results$phase == 12), ]
sig.p.table <- p.table[which(p.results$pVal < 0.05), ]
sig.p.table <- as.data.frame(t(apply(sig.p.table, 1, zscore)))
sig.p.table$Genes <- rownames(sig.p.table)
melt.sig.p.table <- melt(sig.p.table)
melt.sig.p.table$Timepoint <- metadata$Timepoint[match(melt.sig.p.table$variable, metadata$Sample)]
ave.sig.p.table <- aggregate(value ~ Genes + Timepoint, melt.sig.p.table, mean)
ave.sig.p.table$phase <- p.results$phase[match(ave.sig.p.table$Genes, rownames(p.results))]
ave.sig.p.table$phase <- factor(ave.sig.p.table$phase, levels = c("4", "8", "12", "16", "20", "24"))
day.night.boxes <- data.frame(x1 = c(0, 0.53, 15.35, 24.53, 39.35), x2 = c(0.53, 15.53, 24.53, 39.53, 44), y1 = rep(min(ave.sig.p.table$value), 5), y2 = rep(max(ave.sig.p.table$value), 5), labels = c("", "Sunrise", "Sunset", "Sunrise", "Sunset"))
#p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes), color = "grey") + stat_summary(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value), fun.y=mean, geom="line", colour="red") + scale_x_continuous(breaks = seq(0,44, by = 4)) + labs(x = "Hours into Time Series", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none")
colors <- c("#4575b4", "#d73027", "#fc8d59", "#fee090", "#e0f3f8", "#91bfdb")
phases <- c("4", "8", "12", "16", "20", "24")
p <- ggplot()  + geom_rect(data = day.night.boxes, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = c("lightsteelblue", "lemonchiffon", "lightsteelblue", "lemonchiffon", "lightsteelblue"), alpha = 0.5) + geom_text(data = day.night.boxes, inherit.aes = FALSE, aes(x = x1 + 2, y = y2 - 0.25, label = labels)) + geom_line(data = ave.sig.p.table, inherit.aes = F, aes(x = Timepoint, y = value, group = Genes, color = phase)) + scale_x_continuous(breaks = seq(0,44, by = 4), labels = c("0" = "5:00", "4" = "9:00", "8" = "13:00", "12" = "17:00", "16" = "21:00", "18" = "1:00", "24" = "5:00", "28" = "9:00", "32" = "13:00", "36" = "17:00", "40" = "21:00", "44" = "1:00")) + labs(x = "Time", y = "Z-score normalized reads", title = paste(lake, type)) + background_grid(major = "xy", minor = "none") + scale_color_manual(values = colors[which(phases %in% unique(ave.sig.p.table$phase))], name = "Peak", labels = c("4" = "5:00", "8" = "9:00", "12" = "13:00", "16" = "17:00", "20" = "21:00", "24" = "1:00"))
return(p)
}
cycle1 <- cycle_plot("Photosynthesis", "Mendota")
cycle2 <- cycle_plot("Photosynthesis", "Sparkling")
cycle3 <- cycle_plot("Photosynthesis", "Trout")
x <- plot_grid(cycle1, cycle2, cycle3, nrow = 2)
x
x <- plot_grid(cycle1, cycle2, cycle3, nrow = 3)
x
abun_tnorm[1:10, 1:10]
colnames(abun_tnrom)
colnames(abun_tnorm)
head(metadata)
metadata[which(metadata$Lake == "Trout"), ]
which(colnames(abun_tnorm) %in% metadata$Sample[which(metadata$Lake == "Trout" & metadata$Timepoint <= 12)])
abun_tnorm <- abun_tnorm[,which(colnames(abun_tnorm) %in% metadata$Sample[which(metadata$Lake == "Trout" & metadata$Timepoint <= 12)])]
input <- as.matrix(abun_tnorm)
input <- input/500
input <- round(input, digits = 0)
conditions <- metadata$Time[match(colnames(abun_tnorm), metadata$Sample)]
conditions[which(conditions == 9 | conditions == 13 | conditions == 17)] <- "day"
conditions[which(conditions == 5 | conditions == 21 | conditions == 1)] <- "night"
coldata <- data.frame(samples = colnames(abun_tnorm), conditions)
cds <- DESeqDataSetFromMatrix(countData = input,
colData = coldata,
design = ~ conditions)
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
dds <- DESeq(cds)
res <- results(dds)
reskey <- trout_key[match(rownames(res), trout_key$Gene), ]
sig.res.key <- reskey[which(res$padj < 0.05),]
# Make column by certain key words
sig.res.key$Category <- "None"
sig.res.key$Category[grep("photo|Photo", sig.res.key$Product)] <- "Photosynthesis"
sig.res.key$Category[grep("rhodopsin|Rhodopsin|phytoene|lycopene|carotene|Phytoene|Lycopene|Carotene", sig.res.key$Product)] <- "Rhodopsin"
# sig.res.key$Category[grep("sugar|Sugar|ribose|Ribose|hexose|maltose|carbohydrate|Carbohydrate|ose transport", sig.res.key$Product)] <- "Sugar degradation"
sig.res.key$Category[grep("rbcL|ribulose-bisphosphate carboxylase", sig.res.key$Product)] <- "RuBisCO"
sig.res.key$Category[grep("putrescine|Putrescine|spermidine|Spermidine", sig.res.key$Product)] <- "Polyamines"
sig.res.key$Category[grep("citrate lyase|Citrate lyase", sig.res.key$Product)] <- "rTCA"
sig.res.key$Category[grep("nitrogenase|Nitrogenase|NifH|NifD|NifK", sig.res.key$Product)] <- "Nitrogenase"
sig.res.key$Category[grep("Chitobiase|chitobiase|chitinase|Chitinase", sig.res.key$Product)] <- "Chitinase"
sig.res.key$Category[grep("glycoside hydrolase|Glycoside hydrolase|glycosyl hydrolase", sig.res.key$Product)] <- "Glycoside_Hydrolase"
sig.res.key$Category[grep("alkaline phosphatase|Alkaline phosphatase", sig.res.key$Product)] <- "Alkaline_phosphatase"
sig.res.key$Category[grep("cellulase|cellulose", sig.res.key$Product)] <- "Cellulase"
sig.res.key$Category[grep("peroxidase|peroxide|catalase", sig.res.key$Product)] <- "ROS"
sig.res.key$Category[grep("ammonia monooxygenase|methane monoxygenase", sig.res.key$Product)] <- "Methane/Ammonia"
sig.res.key$Category[grep("nitrite reductase|Nitrite reductase|nitrite oxidoreductase|Nitrite oxidoreductase", sig.res.key$Product)] <- "Nitrite_reduction"
sig.res.key$Category[grep("urease", sig.res.key$Product)] <- "Urease"
sig.res.key$Category[grep("protease", sig.res.key$Product)] <- "Protease"
sig.res.key$Category[grep("carboxylate transport", sig.res.key$Product)] <- "Carboxylate transport"
sig.res.key$Category[grep("ribose transport", sig.res.key$Product)] <- "Ribose transport"
sig.res.key$Category[grep("sugar transport|carbohydrate ABC transport|Carbohydrate-selective porin", sig.res.key$Product)] <- "General sugar transport"
sig.res.key$Category[grep("raffinose/stachyose/melibiose transport", sig.res.key$Product)] <- "Raffinose/stachyose/melibiose transport"
sig.res.key$Category[grep("glucose/mannose transport", sig.res.key$Product)] <- "Glucose/mannose transport"
sig.res.key$Category[grep("rhamnose transport", sig.res.key$Product)] <- "Rhamnose transport"
sig.res.key$Category[grep("xylose transport", sig.res.key$Product)] <- "Xylose transport"
sig.res.key$Category[grep("fructose transport", sig.res.key$Product)] <- "Fructose transport"
sig.res.key$Category[grep("chitobiose transport", sig.res.key$Product)] <- "Chitobiose transport"
sig.res.key$Category[grep("lactose/L-arabinose transport", sig.res.key$Product)] <- "Lactose/arabinose transport"
trout.sig.res.key <- sig.res.key
cycle3 <- cycle_plot("Photosynthesis", "Trout")
x <- plot_grid(cycle1, cycle2, cycle3, nrow = 3)
x
abun_tnorm <- tnorm[order(rowSums(tnorm), decreasing = T), ]
abun_tnorm <- abun_tnorm[1:20000,]
colnames(abun_tnorm) <- gsub(".nonrRNA", "", colnames(abun_tnorm))
abun_tnorm <- abun_tnorm[,which(colnames(abun_tnorm) %in% metadata$Sample[which(metadata$Lake == "Trout" & metadata$Timepoint <= 24)])]
input <- as.matrix(abun_tnorm)
input <- input/500
input <- round(input, digits = 0)
conditions <- metadata$Time[match(colnames(abun_tnorm), metadata$Sample)]
conditions[which(conditions == 9 | conditions == 13 | conditions == 17)] <- "day"
conditions[which(conditions == 5 | conditions == 21 | conditions == 1)] <- "night"
coldata <- data.frame(samples = colnames(abun_tnorm), conditions)
cds <- DESeqDataSetFromMatrix(countData = input,
colData = coldata,
design = ~ conditions)
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
dds <- DESeq(cds)
res <- results(dds)
reskey <- trout_key[match(rownames(res), trout_key$Gene), ]
sig.res.key <- reskey[which(res$padj < 0.05),]
# Make column by certain key words
sig.res.key$Category <- "None"
sig.res.key$Category[grep("photo|Photo", sig.res.key$Product)] <- "Photosynthesis"
sig.res.key$Category[grep("rhodopsin|Rhodopsin|phytoene|lycopene|carotene|Phytoene|Lycopene|Carotene", sig.res.key$Product)] <- "Rhodopsin"
# sig.res.key$Category[grep("sugar|Sugar|ribose|Ribose|hexose|maltose|carbohydrate|Carbohydrate|ose transport", sig.res.key$Product)] <- "Sugar degradation"
sig.res.key$Category[grep("rbcL|ribulose-bisphosphate carboxylase", sig.res.key$Product)] <- "RuBisCO"
sig.res.key$Category[grep("putrescine|Putrescine|spermidine|Spermidine", sig.res.key$Product)] <- "Polyamines"
sig.res.key$Category[grep("citrate lyase|Citrate lyase", sig.res.key$Product)] <- "rTCA"
sig.res.key$Category[grep("nitrogenase|Nitrogenase|NifH|NifD|NifK", sig.res.key$Product)] <- "Nitrogenase"
sig.res.key$Category[grep("Chitobiase|chitobiase|chitinase|Chitinase", sig.res.key$Product)] <- "Chitinase"
sig.res.key$Category[grep("glycoside hydrolase|Glycoside hydrolase|glycosyl hydrolase", sig.res.key$Product)] <- "Glycoside_Hydrolase"
sig.res.key$Category[grep("alkaline phosphatase|Alkaline phosphatase", sig.res.key$Product)] <- "Alkaline_phosphatase"
sig.res.key$Category[grep("cellulase|cellulose", sig.res.key$Product)] <- "Cellulase"
sig.res.key$Category[grep("peroxidase|peroxide|catalase", sig.res.key$Product)] <- "ROS"
sig.res.key$Category[grep("ammonia monooxygenase|methane monoxygenase", sig.res.key$Product)] <- "Methane/Ammonia"
sig.res.key$Category[grep("nitrite reductase|Nitrite reductase|nitrite oxidoreductase|Nitrite oxidoreductase", sig.res.key$Product)] <- "Nitrite_reduction"
sig.res.key$Category[grep("urease", sig.res.key$Product)] <- "Urease"
sig.res.key$Category[grep("protease", sig.res.key$Product)] <- "Protease"
sig.res.key$Category[grep("carboxylate transport", sig.res.key$Product)] <- "Carboxylate transport"
sig.res.key$Category[grep("ribose transport", sig.res.key$Product)] <- "Ribose transport"
sig.res.key$Category[grep("sugar transport|carbohydrate ABC transport|Carbohydrate-selective porin", sig.res.key$Product)] <- "General sugar transport"
sig.res.key$Category[grep("raffinose/stachyose/melibiose transport", sig.res.key$Product)] <- "Raffinose/stachyose/melibiose transport"
sig.res.key$Category[grep("glucose/mannose transport", sig.res.key$Product)] <- "Glucose/mannose transport"
sig.res.key$Category[grep("rhamnose transport", sig.res.key$Product)] <- "Rhamnose transport"
sig.res.key$Category[grep("xylose transport", sig.res.key$Product)] <- "Xylose transport"
sig.res.key$Category[grep("fructose transport", sig.res.key$Product)] <- "Fructose transport"
sig.res.key$Category[grep("chitobiose transport", sig.res.key$Product)] <- "Chitobiose transport"
sig.res.key$Category[grep("lactose/L-arabinose transport", sig.res.key$Product)] <- "Lactose/arabinose transport"
trout.sig.res.key <- sig.res.key
abun_mnorm <- mnorm[order(rowSums(mnorm), decreasing = T), ]
abun_mnorm <- abun_mnorm[1:20000,]
colnames(abun_mnorm) <- gsub(".nonrRNA", "", colnames(abun_mnorm))
input <- as.matrix(abun_mnorm)
input <- input/100
input <- round(input, digits = 0)
conditions <- metadata$Time[match(colnames(abun_mnorm), metadata$Sample)]
conditions[which(conditions == 9 | conditions == 13 | conditions == 17)] <- "day"
conditions[which(conditions == 5 | conditions == 21 | conditions == 1)] <- "night"
coldata <- data.frame(samples = colnames(abun_mnorm), conditions)
cds <- DESeqDataSetFromMatrix(countData = input,
colData = coldata,
design = ~ conditions)
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
cycle3 <- cycle_plot("Photosynthesis", "Trout")
x <- plot_grid(cycle1, cycle2, cycle3, nrow = 3)
x
# Set up environment
path <- "/Users/Alex/Desktop/"
path2 <- "/Users/Alex/"
# Sample data
metadata <- read.csv(file = paste(path2, "Desktop/geodes/bioinformatics_workflow/R_processing/sample_metadata.csv", sep = ""), header = T)
enviro_data <- read.csv(paste(path2, "Desktop/geodes/environmental_data/for_humans/compiled_field_data_for_R.csv", sep = ""), header = T)
enviro_data_no_sonde <- enviro_data[which(is.na(enviro_data$pH) == F), ]
chemdata <- read.csv(paste(path2, "Desktop/geodes/environmental_data/GEODES_TNTP.csv", sep = ""), header = T)
chemdata$Lake <- NA
chemdata$Lake[grep("ME", chemdata$Sample)] <- "Mendota"
chemdata$Lake[grep("SP", chemdata$Sample)] <- "Sparkling"
chemdata$Lake[grep("TB", chemdata$Sample)] <- "Trout"
bpa_data <- read.csv(paste(path2, "Desktop/geodes/environmental_data/for_humans/bpa2.csv", sep = ""), header = T)
round(mean(chemdata$TDN[which(chemdata$Lake == "Mendota")]), 2)
round(mean(chemdata$TDN[which(chemdata$Lake == "Mendota")]), 3)
citation("R")
citation()
citation("ggplot2")
citation("cowplot")
source('~/Desktop/geodes/Manuscript/abundance_vs_expression.R', echo=TRUE)
p6
p5
trout_clade
ggplot(trout_clade[which(trout_clade$Taxonomy != "acI-B"),], aes(x = metaG, y = value, color = phyla)) + geom_point(size = 2.5, alpha = 0.5) + geom_text_repel(aes(label = Taxonomy), force = 15, size = 3, color = "black", segment.alpha = 0.25, box.padding = 0.5, data = subset(trout_clade[which(trout_clade$Taxonomy != "acI-B"),], value > 0.001 | metaG > 0.000003)) + labs(x = "Metagenomic reads", y = "Metatranscriptomic reads", title = "F. Trout Bog") + theme(legend.position = "none") + scale_x_continuous(limits = c(0, max(trout_clade$metaG)), labels = scales::scientific) + background_grid(major = "xy", minor = "xy") + scale_y_continuous(labels = scales::scientific) + scale_color_manual(values = c("firebrick2", "skyblue", "goldenrod", "dodgerblue", "green"))
ggplot(trout_clade, aes(x = metaG, y = value, color = phyla)) + geom_point(size = 2.5, alpha = 0.5) + geom_text_repel(aes(label = Taxonomy), force = 15, size = 3, color = "black", segment.alpha = 0.25, box.padding = 0.5, data = subset(trout_clade[which(trout_clade$Taxonomy != "acI-B"),], value > 0.001 | metaG > 0.000003)) + labs(x = "Metagenomic reads", y = "Metatranscriptomic reads", title = "F. Trout Bog") + theme(legend.position = "none") + scale_x_continuous(limits = c(0, max(trout_clade$metaG)), labels = scales::scientific) + background_grid(major = "xy", minor = "xy") + scale_y_continuous(labels = scales::scientific) + scale_color_manual(values = c("firebrick2", "skyblue", "goldenrod", "dodgerblue", "green")
)
p5 <- ggplot(trout_clade, aes(x = metaG, y = value, color = phyla)) + geom_point(size = 2.5, alpha = 0.5) + geom_text_repel(aes(label = Taxonomy), force = 15, size = 3, color = "black", segment.alpha = 0.25, box.padding = 0.5, data = subset(trout_clade[which(trout_clade$Taxonomy != "acI-B"),], value > 0.001 | metaG > 0.000003)) + labs(x = "Metagenomic reads", y = "Metatranscriptomic reads", title = "F. Trout Bog") + theme(legend.position = "none") + scale_x_continuous(limits = c(0, max(trout_clade$metaG)), labels = scales::scientific) + background_grid(major = "xy", minor = "xy") + scale_y_continuous(labels = scales::scientific) + scale_color_manual(values = c("firebrick2", "skyblue", "goldenrod", "dodgerblue", "green"))
to_plot <- plot_grid(p1, p2, p3, p4, p6, p5,  nrow = 2)
to_plot
p5 <- ggplot(trout_clade, aes(x = metaG, y = value, color = phyla)) + geom_point(size = 2.5, alpha = 0.5) + geom_text_repel(aes(label = Taxonomy), force = 15, size = 3, color = "black", segment.alpha = 0.25, box.padding = 0.5, data = subset(trout_clade, value > 0.001 | metaG > 0.000003)) + labs(x = "Metagenomic reads", y = "Metatranscriptomic reads", title = "F. Trout Bog") + theme(legend.position = "none") + scale_x_continuous(limits = c(0, max(trout_clade$metaG)), labels = scales::scientific) + background_grid(major = "xy", minor = "xy") + scale_y_continuous(labels = scales::scientific) + scale_color_manual(values = c("firebrick2", "skyblue", "goldenrod", "dodgerblue", "green"))
to_plot
to_plot <- plot_grid(p1, p2, p3, p4, p6, p5,  nrow = 2)
to_plot
save_plot(paste(path,"geodes/Manuscript/figures_and_tables/abundance_vs_expression.pdf", sep = ""), to_plot, base_height = 8, base_aspect_ratio = 1.5)
