metadata <- read.csv(file = "C:/Users/Alex/Desktop/geodes/bioinformatics_workflow/R_processing/sample_metadata.csv", header = T)
hist(rowSums(mnorm))
abun_mnorm <- mnorm[which(rowSums(mnorm) > (dim(mnorm)[2] * 1000)), ]
hist(rowSums(abun_mnorm))
quanitile(rowSums(abun_mnorm))
quantile(rowSums(abun_mnorm))
quantile(rowSums(mnorm))
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
return(plot.data)
}
timepoints <- metadata$Timepoint[match(colnames(mnorm), metadata$Sample)]
index = 1
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
fourier <- fft(averaged$input_data)
plot.frequency.spectrum(fourier)
gstat <- max(Mod(fourier))/sum(Mod(fourier)[1:5])
gstat
index = 2
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
fourier <- fft(averaged$input_data)
plot.frequency.spectrum(fourier)
gstat <- max(Mod(fourier))/sum(Mod(fourier)[1:5])
gstat
fdr.out <- fdrtool(fisher.g.test(t(mnorm[1:100,])), statistic = "pvalue")
fdr.out
fdr.out$pval < 0.05
which(fdr.out$pval < 0.05)
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
fourier <- fft(averaged$input_data)
plot.frequency.spectrum(fourier)
gstat <- max(Mod(fourier))/sum(Mod(fourier)[1:5])
gstat
index = 35
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
fourier <- fft(averaged$input_data)
plot.frequency.spectrum(fourier)
gstat <- max(Mod(fourier))/sum(Mod(fourier)[1:5])
gstat
index = 60
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
fourier <- fft(averaged$input_data)
plot.frequency.spectrum(fourier)
index = 65
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
fourier <- fft(averaged$input_data)
plot.frequency.spectrum(fourier)
rownames(mnorm)[65]
grep("A023D18DRAFT_00000840_2236661009", mendota_key)
mendota_key[which(mendota_key$Gene == "A023D18DRAFT_00000840_2236661009")]
mendota_key[which(mendota_key$Gene == "A023D18DRAFT_00000840_2236661009"),]
index = 60
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
rownames(mnorm)[60]
mendota_key[which(mendota_key$Gene == "A023D18DRAFT_00000790_2236661009"),]
index = 35
input_data <- as.numeric(mnorm[index,])
to.agg <- data.frame(timepoints, input_data)
ggplot(data = to.agg, aes(x = timepoints, y = input_data)) + geom_point()
averaged <- aggregate(input_data ~ timepoints, data = to.agg, mean)
ggplot(data = averaged, aes(x = timepoints, y = input_data)) + geom_point() + geom_line()
rownames(mnorm)[35]
mendota_key[which(mendota_key$Gene == "A023D18DRAFT_00000420_2236661009"),]
abun_mnorm$Genes <- rownames(abun_mnorm)
abun_mnorm <- melt(abun_mnorm)
abun_mnorm$Timepoint <- metadata$Timepoint[match(abun_mnorm$variable, metadata$Sample)]
agg_abun_mnorm <- aggregate(value ~ Genes + Timepoint, data = abun_mnorm, mean)
new_abun_mnorm <- reshape(agg_abun_mnorm, idvar = "Genes", timevar = "Timepoint", direction = "wide")
rownames(new_abun_mnorm) <- new_abun_mnorm[, 1]
new_abun_mnorm <- new_abun_mnorm[, 2:dim(new_abun_mnorm)[2]]
fdr.mendota <- fdrtool(fisher.g.test(t(new_abun_mnorm)), statistic = "pvalue")
sig.mendota <- t(new_abun_mnorm[which(fdr.mendota$pval < 0.05),])
mendota_net <- blockwiseModules(sig.mendota, maxBlockSize = 1000, power = 8, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 30, numericLabels = T, nThreads = 8, verbose = 3)
str(mendota_net)
sig.mendota.key <- mendota_key[match(colnames(sig.mendota), mendota_key$Gene), ]
sig.mendota.key$Product <- as.character(sig.mendota.key$Product)
sig.mendota.key$Cluster <- mendota_net$colors
head(sig.mendota.key)
total_reads <- rowSums(mnorm)
sig.mendota.key$Totals <- total_reads[match(sig.mendota.key$Gene, names(total_reads))]
head(mendota_net$MEs)
write.csv(sig.mendota.key, "D:/geodes_data_tables/WGCNA_mendota_results.csv", row.names = F)
write.csv(mendota_net$MEs, "D:/geodes_data_tables/WGCNA_mendota_eigenvectors.csv", row.names = T)
library(ggplot2)
library(cowplot)
library(reshape2)
library(GeneCycle)
library(WGCNA)
allowWGCNAThreads()
enableWGCNAThreads()
### Load data (start with only one to save RAM and comment the rest out)
# Normalized read tables
#snorm <- read.csv("D:/geodes_data_tables/Sparkling_normalized.csv", header = T, row.names = 1)
#tnorm <- read.csv("D:/geodes_data_tables/Trout_normalized.csv", header = T, row.names = 1)
mnorm <- read.csv("D:/geodes_data_tables/Mendota_normalized.csv", header = T, row.names = 1)
# Gene keys
mendota_key <- read.csv("D:/geodes_data_tables/Mendota_ID90_genekey.csv", header = T)
# Sample data
metadata <- read.csv(file = "C:/Users/Alex/Desktop/geodes/bioinformatics_workflow/R_processing/sample_metadata.csv", header = T)
abun_mnorm <- mnorm[which(rowSums(mnorm) > (dim(mnorm)[2] * 1000)), ]
abun_mnorm$Genes <- rownames(abun_mnorm)
abun_mnorm <- melt(abun_mnorm)
abun_mnorm$Timepoint <- metadata$Timepoint[match(abun_mnorm$variable, metadata$Sample)]
agg_abun_mnorm <- aggregate(value ~ Genes + Timepoint, data = abun_mnorm, mean)
new_abun_mnorm <- reshape(agg_abun_mnorm, idvar = "Genes", timevar = "Timepoint", direction = "wide")
rownames(new_abun_mnorm) <- new_abun_mnorm[, 1]
new_abun_mnorm <- new_abun_mnorm[, 2:dim(new_abun_mnorm)[2]]
fdr.mendota <- fdrtool(fisher.g.test(t(new_abun_mnorm)), statistic = "pvalue")
sig.mendota <- t(new_abun_mnorm[which(fdr.mendota$pval < 0.05),])
# Make the modules
mendota_net <- blockwiseModules(sig.mendota, maxBlockSize = 1000, power = 8, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 30, numericLabels = T, nThreads = 8, verbose = 3)
str(mendota_net)
head(mendota_net$MEs)
eigenvectors <- mendota_net$MEs
hclust(eigenvectors)
str(eigenvectors)
hclust(as.matrix(eigenvectors))
dim(eigenvectors)
adjacency <- matrix(NA, nrow = dim(eigenvectors)[2], ncol = dim(eigenvectors)[2])
rownames(adjacency) <- colnames(adjacency) <- colnames(eigenvectors)
i=1
j=3
cor(eigenvectors[,i], eigenvectors[,j])
for(i in 1:dim(eigenvectors)[2]){
for(j in 1:dim(eigenvectors)[2]){
adjacency[i,j] <- cor(eigenvectors[,i], eigenvectors[,j])
}
}
adjacency
heatmap(adjacency)
adjacency <- matrix(NA, nrow = dim(eigenvectors)[2], ncol = dim(eigenvectors)[2])
rownames(adjacency) <- colnames(adjacency) <- colnames(eigenvectors)
for(i in 1:dim(eigenvectors)[2]){
for(j in 1:dim(eigenvectors)[2]){
adjacency[i,j] <- cor(eigenvectors[1:11,i], eigenvectors[2:12,j])
}
}
heatmap(adjacency)
hclust(dist(eigenvectors))
h <- hclust(dist(eigenvectors))
plot(h)
h <- hclust(dist(t(eigenvectors)))
plot(h)
install.packages("statnet", dependencies = T)
library(statnet)
# Build eigennetwork
net <- as.network(x = my_sociomatrix, directed = TRUE, loops = FALSE, matrix.type = "adjacency")
# Build eigennetwork
net <- as.network(x = adjacency, directed = TRUE, loops = FALSE, matrix.type = "adjacency")
plot.network(net, displaylabels = T)
adjacency
adjacency <- matrix(0, nrow = dim(eigenvectors)[2], ncol = dim(eigenvectors)[2])
rownames(adjacency) <- colnames(adjacency) <- colnames(eigenvectors)
for(i in 1:dim(eigenvectors)[2]){
for(j in 1:dim(eigenvectors)[2]){
value <- cor(eigenvectors[1:11,i], eigenvectors[2:12,j])
if(value > 0.75 | value < -0.75){
adjacency[i,j] <- value
}
}
}
adjacency
# Build eigennetwork
net <- as.network(x = adjacency, directed = TRUE, loops = FALSE, matrix.type = "adjacency")
plot.network(net, displaylabels = T)
plot.network(net, displaylabels = T, vertex.cex = 5, label.pos = 5)
plot.network(net, displaylabels = T, vertex.cex = 3, label.pos = 5)
# Make pretty plot of eigengenes
long_eigengenes <- melt(eigengenes)
# Make pretty plot of eigengenes
long_eigenvectors <- melt(eigenvectors)
head(long_eigenvectors)
# Make pretty plot of eigengenes
eigenvectors$Timepoint <- rownames(eigenvectors)
long_eigenvectors <- melt(eigenvectors)
head(long_eigenvectors)
heatmap(adjacency)
head(eigenvectors)
plot.colors <- NA
plot.colors[which(long_eigenvectors$value > 0)] <- "green"
plot.colors[which(long_eigenvectors$value < 0)] <- "red"
long_eigenvectors$Sign <- plot.colors
ggplot(data = long_eigenvectors[which(variable ==cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster)
head(long_eigenvectors)
cluster = "ME44"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster)
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = NULL)
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red"))
long_eigenvectors$Timepoint <- factor(long_eigenvectors$Timepoint, levels = seq(1:12))
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = NULL)
head(long_eigenvectors)
long_eigenvectors$Timepoint <- factor(long_eigenvectors$Timepoint, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"))
cluster = "ME44"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = NULL)
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red"))
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME15"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME51"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME11"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME17"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME41"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME53"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME43"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
plot.network(net, displaylabels = T, vertex.cex = 3, label.pos = 5)
cluster = "ME29"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME46"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME34"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME28"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME56"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME50"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
plot.network(net, displaylabels = T, vertex.cex = 3, label.pos = 5)
cluster = "ME18"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME27"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME20"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME19"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME49"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME1"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME54"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME5"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME16"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME35"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME42"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME12"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME10"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME4"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME9"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME32"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME38"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME22"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME33"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME31"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME24"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME48"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME14"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME23"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME40"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME45"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME44"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME15"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME11"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME52"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME41"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME43"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME17"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME51"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME44"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME15"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME51"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME8"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME13"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME14"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME36"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
# Get genes and taxonomy from each cluster
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 53),]
sig.mendota.key <- mendota_key[match(colnames(sig.mendota), mendota_key$Gene), ]
sig.mendota.key$Product <- as.character(sig.mendota.key$Product)
sig.mendota.key$Cluster <- mendota_net$colors
total_reads <- rowSums(mnorm)
sig.mendota.key$Totals <- total_reads[match(sig.mendota.key$Gene, names(total_reads))]
# Get genes and taxonomy from each cluster
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 53),]
x <- x[order(x$Totals),]
x[(dim(x)[1] - 50): dim(x)[1],]
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
sig.mendota.key$Taxonomy <- gsub("Bacteria;", "", sig.mendota.key$Taxonomy)
sig.mendota.key$Phylum <- sapply(strsplit(as.character(sig.mendota.key$Taxonomy),";"), `[`, 1)
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
# Get genes and taxonomy from each cluster
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 53),]
x <- x[order(x$Totals),]
x[(dim(x)[1] - 50): dim(x)[1],]
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
ggplot(phyla_breakdown[grep("NO CLASSIFICATION", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust =1))
phyla_breakdwon
phyla_breakdown
sig.mendota.key <- mendota_key[match(colnames(sig.mendota), mendota_key$Gene), ]
sig.mendota.key$Product <- as.character(sig.mendota.key$Product)
sig.mendota.key$Cluster <- mendota_net$colors
sig.mendota.key$Taxonomy <- gsub("Bacteria;", "", sig.mendota.key$Taxonomy)
sig.mendota_key$Taxonomy <- gsub("Eukaryota;", "", mendota_key$Taxonomy)
sig.mendota_key$Phylum <- sapply(strsplit(as.character(mendota_key$Taxonomy),";"), `[`, 1)
sig.mendota_key$Phylum <- gsub("Cryptophyta,Cryptophyceae,Pyrenomonadales,Geminigeraceae,Guillardia,theta", "Cryptophyta", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("Haptophyta,Prymnesiophyceae,Isochrysidales,Noelaerhabdaceae,Emiliania,huxleyi", "Haptophyta", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("Heterokonta,Coscinodiscophyceae,Thalassiosirales,Thalassiosiraceae,Thalassiosira,pseudonana", "Heterokonta", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("Heterokonta,Pelagophyceae,Pelagomonadales,Pelagomonadaceae,Aureococcus,anophagefferens", "Heterokonta", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("unclassified unclassified unclassified unclassified unclassified", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("NO CLASSIFICATION MH", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("NO CLASSIFICATION LP", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("NO CLASSIFICATION DUE TO FEW HITS IN PHYLODIST", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("None", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("unclassified unclassified Perkinsida", "Perkinsozoa", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("unclassified unclassified", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("unclassified Oligohymenophorea", "Ciliophora", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("unclassified Pelagophyceae", "Ochrophyta", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("unclassified", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("Unclassified ", "Unclassified", sig.mendota_key$Phylum)
sig.mendota_key$Phylum <- gsub("UnclassifiedIsochrysidales", "Haptophyta", sig.mendota_key$Phylum)
sig.mendota.key <- mendota.key[match(colnames(sig.mendota), mendota.key$Gene), ]
sig.mendota.key$Product <- as.character(sig.mendota.key$Product)
sig.mendota.key$Cluster <- mendota_net$colors
sig.mendota.key$Taxonomy <- gsub("Bacteria;", "", sig.mendota.key$Taxonomy)
sig.mendota.key$Taxonomy <- gsub("Eukaryota;", "", mendota.key$Taxonomy)
sig.mendota.key$Phylum <- sapply(strsplit(as.character(mendota.key$Taxonomy),";"), `[`, 1)
sig.mendota.key$Phylum <- gsub("Cryptophyta,Cryptophyceae,Pyrenomonadales,Geminigeraceae,Guillardia,theta", "Cryptophyta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Haptophyta,Prymnesiophyceae,Isochrysidales,Noelaerhabdaceae,Emiliania,huxleyi", "Haptophyta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Heterokonta,Coscinodiscophyceae,Thalassiosirales,Thalassiosiraceae,Thalassiosira,pseudonana", "Heterokonta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Heterokonta,Pelagophyceae,Pelagomonadales,Pelagomonadaceae,Aureococcus,anophagefferens", "Heterokonta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified unclassified unclassified unclassified unclassified", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("NO CLASSIFICATION MH", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("NO CLASSIFICATION LP", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("NO CLASSIFICATION DUE TO FEW HITS IN PHYLODIST", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("None", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified unclassified Perkinsida", "Perkinsozoa", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified unclassified", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified Oligohymenophorea", "Ciliophora", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified Pelagophyceae", "Ochrophyta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Unclassified ", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("UnclassifiedIsochrysidales", "Haptophyta", sig.mendota.key$Phylum)
sig.mendota.key <- mendota.key[match(colnames(sig.mendota), mendota.key$Gene), ]
sig.mendota.key$Product <- as.character(sig.mendota.key$Product)
sig.mendota.key <- mendota_key[match(colnames(sig.mendota), mendota_key$Gene), ]
sig.mendota.key$Product <- as.character(sig.mendota.key$Product)
sig.mendota.key$Cluster <- mendota_net$colors
sig.mendota.key$Taxonomy <- gsub("Bacteria;", "", sig.mendota.key$Taxonomy)
sig.mendota.key$Taxonomy <- gsub("Eukaryota;", "", sig.mendota.key$Taxonomy)
sig.mendota.key$Phylum <- sapply(strsplit(as.character(mendota.key$Taxonomy),";"), `[`, 1)
sig.mendota.key$Phylum <- sapply(strsplit(as.character(sig.mendota.key$Taxonomy),";"), `[`, 1)
sig.mendota.key$Phylum <- gsub("Cryptophyta,Cryptophyceae,Pyrenomonadales,Geminigeraceae,Guillardia,theta", "Cryptophyta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Haptophyta,Prymnesiophyceae,Isochrysidales,Noelaerhabdaceae,Emiliania,huxleyi", "Haptophyta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Heterokonta,Coscinodiscophyceae,Thalassiosirales,Thalassiosiraceae,Thalassiosira,pseudonana", "Heterokonta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Heterokonta,Pelagophyceae,Pelagomonadales,Pelagomonadaceae,Aureococcus,anophagefferens", "Heterokonta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified unclassified unclassified unclassified unclassified", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("NO CLASSIFICATION MH", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("NO CLASSIFICATION LP", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("NO CLASSIFICATION DUE TO FEW HITS IN PHYLODIST", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("None", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified unclassified Perkinsida", "Perkinsozoa", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified unclassified", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified Oligohymenophorea", "Ciliophora", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified Pelagophyceae", "Ochrophyta", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("unclassified", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("Unclassified ", "Unclassified", sig.mendota.key$Phylum)
sig.mendota.key$Phylum <- gsub("UnclassifiedIsochrysidales", "Haptophyta", sig.mendota.key$Phylum)
total_reads <- rowSums(mnorm)
sig.mendota.key$Totals <- total_reads[match(sig.mendota.key$Gene, names(total_reads))]
# Get genes and taxonomy from each cluster
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 53),]
x <- x[order(x$Totals),]
x[(dim(x)[1] - 50): dim(x)[1],]
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
ggplot(phyla_breakdown[grep("NO CLASSIFICATION", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust =1))
phyla_breakdown
x
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust =1))
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 8),]
x <- x[order(x$Totals),]
x[(dim(x)[1] - 50): dim(x)[1],]
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust =1))
x
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 0))
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1))
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0))
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 13),]
x <- x[order(x$Totals),]
x[(dim(x)[1] - 50): dim(x)[1],]
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
x
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 36),]
x <- x[order(x$Totals),]
x[(dim(x)[1] - 50): dim(x)[1],]
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
x
cluster = "ME6"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "M31"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME31"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME4"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME3"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
cluster = "ME26"
ggplot(data = long_eigenvectors[which(long_eigenvectors$variable == cluster), ], aes(x = Timepoint, y = value, fill = Sign)) + geom_bar(stat = "identity") + labs(title = cluster) + scale_fill_manual(values = c("green", "red")) + theme(legend.position = "none")
x <- sig.mendota.key[which(sig.mendota.key$Cluster == 26),]
x <- x[order(x$Totals),]
x[(dim(x)[1] - 50): dim(x)[1],]
phyla_breakdown <- aggregate(Totals ~ Phylum, x, sum)
ggplot(phyla_breakdown[grep("Unclassified", phyla_breakdown$Phylum, invert = T), ], aes(x = Phylum, y = Totals)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
x
###########
# set up
library(OTUtable)
install.packages("OTUtable")
###########
# set up
library(OTUtable)
data(metadata)
data(otu_table)
data(taxonomy)
lakes <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK", "MA")
# Split epilimnion and hypolimnion into separate tables
epilimnia <- bog_subset("..E", otu_table)
hypolimnia <- bog_subset("..H", otu_table)
# Calculate observed richness
epi.obs <- apply(epilimnia, 2, obs_richness)
hypo.obs <- apply(hypolimnia, 2, obs_richness)
# Extract sampling location from sample names
epi.lakes <- substr(names(epi.obs), start = 1, stop = 2)
hypo.lakes <- substr(names(hypo.obs), start = 1, stop = 2)
# Make dataframe for plotting
epi.data <- data.frame(epi.lakes, epi.obs)
hypo.data <- data.frame(hypo.lakes, hypo.obs)
# Order factors
epi.data$epi.lakes <- ordered(epi.data$epi.lakes, levels = lakes)
hypo.data$hypo.lakes <- ordered(hypo.data$hypo.lakes, levels = lakes)
# Check significance using the Wilcoxon Rank Test on medians (not output as pdf, indicated as symbols in Illustrator)
pairwise.wilcox.test(epi.data$epi.obs, epi.data$epi.lakes, p.adjust.method = "bonferroni")
pairwise.wilcox.test(hypo.data$hypo.obs, hypo.data$hypo.lakes, p.adjust.method = "bonferroni")
