# sp_pvals <- sp_pvals[which(howmanynas < 11), ]
# sp_fold <- sp_fold[which(howmanynas < 11), ]
# sp_norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
# keep <- match(colnames(sp_norm), rownames(spark_meta))
# keep <- keep[which(is.na(keep) == F)]
# sp_norm <- sp_norm[, keep]
# sp_norm <- sp_norm[which(rowSums(sp_norm) > 0), ]
#
# assign(paste("sp_pvals", j, sep = ""), sp_pvals)
# assign(paste("sp_fold", j, sep = ""), sp_fold)
# assign(paste("sp_norm", j, sep = ""), sp_norm)
#
# print(paste("Sparkling", j))
# #Trout
# res1 <- nbinomTest(cds, "Trout;0", "Trout;4")
# res2 <- nbinomTest(cds, "Trout;4", "Trout;8")
# res3 <- nbinomTest(cds, "Trout;8", "Trout;12")
# res4 <- nbinomTest(cds, "Trout;12", "Trout;16")
# res5 <- nbinomTest(cds, "Trout;16", "Trout;20")
# res6 <- nbinomTest(cds, "Trout;20", "Trout;24")
# res7 <- nbinomTest(cds, "Trout;24", "Trout;28")
# #missing timepoints
#
# tb_pvals <- data.frame(res1$pval, res2$pval, res3$pval, res4$pval, res5$pval, res6$pval, res7$pval)
# tb_fold <- data.frame(res1$foldChange, res2$foldChange, res3$foldChange, res4$foldChange, res5$foldChange, res6$foldChange, res7$foldChange)
# rownames(tb_fold) <- rownames(tb_pvals) <- res1$id
# colnames(tb_fold) <- colnames(tb_pvals) <- c("TB0:4", "TB4:8", "TB8:12", "TB12:16", "TB16:20", "TB20:24", "TB24:28")
#
# howmanynas <- c()
# for(i in 1:dim(tb_pvals)[1]){
#   howmanynas[i] <- length(which(is.na(tb_pvals[i, ]) == T))
# }
#
# tb_pvals <- tb_pvals[which(howmanynas < 7), ]
# tb_fold <- tb_fold[which(howmanynas < 7), ]
# tb_norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
# keep <- match(colnames(tb_norm), rownames(trout_meta))
# keep <- keep[which(is.na(keep) == F)]
# tb_norm <- tb_norm[, keep]
# tb_norm <- tb_norm[which(rowSums(tb_norm) > 0), ]
#
# assign(paste("tb_pvals", j, sep = ""), tb_pvals)
# assign(paste("tb_fold", j, sep = ""), tb_fold)
# assign(paste("tb_norm", j, sep = ""), tb_norm)
#
# print(paste("Trout", j))
#
# #Mendota
# res1 <- nbinomTest(cds, "Mendota;0", "Mendota;4")
# res2 <- nbinomTest(cds, "Mendota;4", "Mendota;8")
# res3 <- nbinomTest(cds, "Mendota;8", "Mendota;12")
# res4 <- nbinomTest(cds, "Mendota;12", "Mendota;16")
# res5 <- nbinomTest(cds, "Mendota;16", "Mendota;20")
# res6 <- nbinomTest(cds, "Mendota;20", "Mendota;24")
# res7 <- nbinomTest(cds, "Mendota;24", "Mendota;28")
# res8 <- nbinomTest(cds, "Mendota;28", "Mendota;32")
# res9 <- nbinomTest(cds, "Mendota;32", "Mendota;36")
# res10 <- nbinomTest(cds, "Mendota;36", "Mendota;40")
# res11 <- nbinomTest(cds, "Mendota;40", "Mendota;44")
#
# me_pvals <- data.frame(res1$pval, res2$pval, res3$pval, res4$pval, res5$pval, res6$pval, res7$pval, res8$pval, res9$pval, res10$pval, res11$pval)
# me_fold <- data.frame(res1$foldChange, res2$foldChange, res3$foldChange, res4$foldChange, res5$foldChange, res6$foldChange, res7$foldChange, res8$foldChange, res9$foldChange, res10$foldChange, res11$foldChange)
# rownames(me_fold) <- rownames(me_pvals) <- res1$id
# colnames(me_fold) <- colnames(me_pvals) <- c("ME0:4", "ME4:8", "ME8:12", "ME12:16", "ME16:20", "ME20:24", "ME24:28", "ME28:32", "ME32:36", "ME36:40", "ME:40:44")
#
# howmanynas <- c()
# for(i in 1:dim(me_pvals)[1]){
#   howmanynas[i] <- length(which(is.na(me_pvals[i, ]) == T))
# }
#
# me_pvals <- me_pvals[which(howmanynas < 11), ]
# me_fold <- me_fold[which(howmanynas < 11), ]
me_norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
keep <- match(colnames(me_norm), rownames(mendota_meta))
keep <- keep[which(is.na(keep) == F)]
me_norm <- me_norm[, keep]
me_norm <- me_norm[which(rowSums(me_norm) > 0), ]
# assign(paste("me_pvals", j, sep = ""), me_pvals)
# assign(paste("me_fold", j, sep = ""), me_fold)
assign(paste("me_norm", j, sep = ""), me_norm)
print(paste("Mendota", j))
}
me_norm <- rbind(me_norm1, me_norm2, me_norm3, me_norm4, me_norm5, me_norm6, me_norm7, me_norm8, me_norm9, me_norm10, me_norm11, me_norm12, me_norm13, me_norm14, me_norm15, me_norm16, me_norm17, me_norm18)
dim(me_norm)
dim(tb_norm)
dim(sp_norm)
31+22+34
write.csv(me_norm, file = "D:/GEODES_mapping_summaries/Mendota_normalized_counts_2017-06-20.csv")
library(WGCNA)
allowWGCNAThreads()
snorm <- read.csv("D:/GEODES_mapping_summaries/Sparkling_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
tnorm <- read.csv("D:/GEODES_mapping_summaries/TroutBog_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
mnorm <- read.csv("D:/GEODES_mapping_summaries/Mendota_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
quantile(rowSums(snorm))
quantile(rowSums(tnorm))
quantile(rowSums(mnorm))
quantile(rowSums(snorm), .75)
snorm <- snorm[which(rowSums(snorm) > quantile(rowSums(snorm), .75)), ]
tnorm <- tnorm[which(rowSums(tnorm) > quantile(rowSums(tnorm), .75)), ]
mnorm <- mnorm[which(rowSums(mnorm) > quantile(rowSums(mnorm), .75)), ]
sampletree <- hclust(dist(t(snorm)), method = "average")
plot(sampletree, main = "Sparkling", sub = "", xlab = "")
sampletree <- hclust(dist(t(tnorm)), method = "average")
plot(sampletree, main = "Trout", sub = "", xlab = "")
sampletree <- hclust(dist(t(tnorm)), method = "average")
plot(sampletree, main = "Mendota", sub = "", xlab = "")
sampletree <- hclust(dist(t(mnorm)), method = "average")
plot(sampletree, main = "Mendota", sub = "", xlab = "")
library(ff)
library(DESeq)
metadata <- read.csv(file = "C:/Users/Alex/Desktop/geodes/analyses/04R_calculations/sample_metadata.csv", header = T, row.names = 1)
metadata$condition <- paste(metadata$Lake, metadata$Timepoint, sep = ";")
coldata <- data.frame(metadata[,4])
spark_meta <- metadata[which(metadata$Lake == "Sparkling"), ]
trout_meta <- metadata[which(metadata$Lake == "Trout"), ]
mendota_meta <- metadata[which(metadata$Lake == "Mendota"), ]
# Use pFN18A as the normalization factor
gene_table20 <- read.csv(file = "D:/GEODES_mapping_summaries/gene_table20.csv", header = T, row.names = 1)
effect_size <- gene_table20[grep("pFN18A", rownames(gene_table20)), ]
effect_size <- effect_size/median(as.numeric(effect_size))
# Some of these samples had the standard amplify really poorly - make a vector to remove these from each dataset
good_or_bad <- effect_size > 0.001
# Remove table20 to save RAM
rm(gene_table20)
# Read in each table and calculate a p-value for each row. Save pvalue (non-adjusted), fold change (normalized), and read count (normalized)
datasets <- c("gene_table1", "gene_table2", "gene_table3", "gene_table4", "gene_table5", "gene_table6", "gene_table7", "gene_table8", "gene_table8", "gene_table9", "gene_table10", "gene_table11", "gene_table12", "gene_table13", "gene_table17", "gene_table18", "gene_table19", "gene_table20")
j=1
table <- read.csv(file = paste("D:/GEODES_mapping_summaries/", datasets[j], ".csv", sep = ""), header = T, row.names = 1)
table <- table[, which(good_or_bad == T)]
colnames(table) <- gsub("_nonrRNA", "", colnames(table))
table <- read.csv(file = paste("D:/GEODES_mapping_summaries/", datasets[j], ".csv", sep = ""), header = T, row.names = 1)
table <- table[, which(good_or_bad == T)]
colnames(table) <- gsub("_nonrRNA", "", colnames(table))
sp_norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
match(colnames(sp_norm), rownames(spark_meta))
match(rownames(spark_meta), colnames(sp_norm))
keep <- match(rownames(spark_meta), colnames(sp_norm))
keep <- keep[which(is.na(keep) == F)]
sp_norm <- sp_norm[, keep]
sp_norm <- sp_norm[which(rowSums(sp_norm) > 0), ]
assign(paste("sp_norm", j, sep = ""), sp_norm)
tb_norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
match(rownames(trout_meta), colnames(tb_norm))
keep <- match(rownames(trout_meta), colnames(tb_norm))
keep <- keep[which(is.na(keep) == F)]
tb_norm <- tb_norm[, keep]
tb_norm <- tb_norm[which(rowSums(tb_norm) > 0), ]
assign(paste("tb_norm", j, sep = ""), tb_norm)
me_norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
match(rownames(mendota_meta), colnames(me_norm))
me_norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
keep <- match(rownames(mendota_meta), colnames(me_norm))
keep <- keep[which(is.na(keep) == F)]
me_norm <- me_norm[, keep]
me_norm <- me_norm[which(rowSums(me_norm) > 0), ]
# assign(paste("me_pvals", j, sep = ""), me_pvals)
# assign(paste("me_fold", j, sep = ""), me_fold)
assign(paste("me_norm", j, sep = ""), me_norm)
print(paste("Mendota", j))
colnames(snorm1)
colnames(sp_norm1)
colnames(tb_norm1)
colnames(me_norm1)
norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
keep <- match(rownames(spark_meta), colnames(norm))
keep <- keep[which(is.na(keep) == F)]
sp_norm <- norm[, keep]
sp_norm <- sp_norm[which(rowSums(sp_norm) > 0), ]
colnames(sp_norm)
for(j in 1:length(datasets)){
table <- read.csv(file = paste("D:/GEODES_mapping_summaries/", datasets[j], ".csv", sep = ""), header = T, row.names = 1)
table <- table[, which(good_or_bad == T)]
colnames(table) <- gsub("_nonrRNA", "", colnames(table))
# cds <- newCountDataSet(countData = table, conditions = metadata$condition[match(colnames(table), rownames(metadata))], sizeFactors = as.numeric(effect_size[which(good_or_bad == T)]))
# cds <- estimateDispersions(cds)
# #Sparkling
# res1 <- nbinomTest(cds, "Sparkling;0", "Sparkling;4")
# res2 <- nbinomTest(cds, "Sparkling;4", "Sparkling;8")
# res3 <- nbinomTest(cds, "Sparkling;8", "Sparkling;12")
# res4 <- nbinomTest(cds, "Sparkling;12", "Sparkling;16")
# res5 <- nbinomTest(cds, "Sparkling;16", "Sparkling;20")
# res6 <- nbinomTest(cds, "Sparkling;20", "Sparkling;24")
# res7 <- nbinomTest(cds, "Sparkling;24", "Sparkling;28")
# res8 <- nbinomTest(cds, "Sparkling;28", "Sparkling;32")
# res9 <- nbinomTest(cds, "Sparkling;32", "Sparkling;36")
# res10 <- nbinomTest(cds, "Sparkling;36", "Sparkling;40")
# res11 <- nbinomTest(cds, "Sparkling;40", "Sparkling;44")
#
# sp_pvals <- data.frame(res1$pval, res2$pval, res3$pval, res4$pval, res5$pval, res6$pval, res7$pval, res8$pval, res9$pval, res10$pval, res11$pval)
# sp_fold <- data.frame(res1$foldChange, res2$foldChange, res3$foldChange, res4$foldChange, res5$foldChange, res6$foldChange, res7$foldChange, res8$foldChange, res9$foldChange, res10$foldChange, res11$foldChange)
# rownames(sp_fold) <- rownames(sp_pvals) <- res1$id
# colnames(sp_fold) <- colnames(sp_pvals) <- c("SP0:4", "SP4:8", "SP8:12", "SP12:16", "SP16:20", "SP20:24", "SP24:28", "SP28:32", "SP32:36", "SP36:40", "SP:40:44")
#
# howmanynas <- c()
# for(i in 1:dim(sp_pvals)[1]){
#   howmanynas[i] <- length(which(is.na(sp_pvals[i, ]) == T))
# }
#
# sp_pvals <- sp_pvals[which(howmanynas < 11), ]
# sp_fold <- sp_fold[which(howmanynas < 11), ]
norm <- as.data.frame(sweep(as.matrix(table), 2, as.numeric(effect_size[which(good_or_bad == T)]), "/"))
keep <- match(rownames(spark_meta), colnames(norm))
keep <- keep[which(is.na(keep) == F)]
sp_norm <- norm[, keep]
sp_norm <- sp_norm[which(rowSums(sp_norm) > 0), ]
#
# assign(paste("sp_pvals", j, sep = ""), sp_pvals)
# assign(paste("sp_fold", j, sep = ""), sp_fold)
assign(paste("sp_norm", j, sep = ""), sp_norm)
#
# print(paste("Sparkling", j))
# #Trout
# res1 <- nbinomTest(cds, "Trout;0", "Trout;4")
# res2 <- nbinomTest(cds, "Trout;4", "Trout;8")
# res3 <- nbinomTest(cds, "Trout;8", "Trout;12")
# res4 <- nbinomTest(cds, "Trout;12", "Trout;16")
# res5 <- nbinomTest(cds, "Trout;16", "Trout;20")
# res6 <- nbinomTest(cds, "Trout;20", "Trout;24")
# res7 <- nbinomTest(cds, "Trout;24", "Trout;28")
# #missing timepoints
#
# tb_pvals <- data.frame(res1$pval, res2$pval, res3$pval, res4$pval, res5$pval, res6$pval, res7$pval)
# tb_fold <- data.frame(res1$foldChange, res2$foldChange, res3$foldChange, res4$foldChange, res5$foldChange, res6$foldChange, res7$foldChange)
# rownames(tb_fold) <- rownames(tb_pvals) <- res1$id
# colnames(tb_fold) <- colnames(tb_pvals) <- c("TB0:4", "TB4:8", "TB8:12", "TB12:16", "TB16:20", "TB20:24", "TB24:28")
#
# howmanynas <- c()
# for(i in 1:dim(tb_pvals)[1]){
#   howmanynas[i] <- length(which(is.na(tb_pvals[i, ]) == T))
# }
#
# tb_pvals <- tb_pvals[which(howmanynas < 7), ]
# tb_fold <- tb_fold[which(howmanynas < 7), ]
keep <- match(rownames(trout_meta), colnames(norm))
keep <- keep[which(is.na(keep) == F)]
tb_norm <- norm[, keep]
tb_norm <- tb_norm[which(rowSums(tb_norm) > 0), ]
#
# assign(paste("tb_pvals", j, sep = ""), tb_pvals)
# assign(paste("tb_fold", j, sep = ""), tb_fold)
assign(paste("tb_norm", j, sep = ""), tb_norm)
#
# print(paste("Trout", j))
#
# #Mendota
# res1 <- nbinomTest(cds, "Mendota;0", "Mendota;4")
# res2 <- nbinomTest(cds, "Mendota;4", "Mendota;8")
# res3 <- nbinomTest(cds, "Mendota;8", "Mendota;12")
# res4 <- nbinomTest(cds, "Mendota;12", "Mendota;16")
# res5 <- nbinomTest(cds, "Mendota;16", "Mendota;20")
# res6 <- nbinomTest(cds, "Mendota;20", "Mendota;24")
# res7 <- nbinomTest(cds, "Mendota;24", "Mendota;28")
# res8 <- nbinomTest(cds, "Mendota;28", "Mendota;32")
# res9 <- nbinomTest(cds, "Mendota;32", "Mendota;36")
# res10 <- nbinomTest(cds, "Mendota;36", "Mendota;40")
# res11 <- nbinomTest(cds, "Mendota;40", "Mendota;44")
#
# me_pvals <- data.frame(res1$pval, res2$pval, res3$pval, res4$pval, res5$pval, res6$pval, res7$pval, res8$pval, res9$pval, res10$pval, res11$pval)
# me_fold <- data.frame(res1$foldChange, res2$foldChange, res3$foldChange, res4$foldChange, res5$foldChange, res6$foldChange, res7$foldChange, res8$foldChange, res9$foldChange, res10$foldChange, res11$foldChange)
# rownames(me_fold) <- rownames(me_pvals) <- res1$id
# colnames(me_fold) <- colnames(me_pvals) <- c("ME0:4", "ME4:8", "ME8:12", "ME12:16", "ME16:20", "ME20:24", "ME24:28", "ME28:32", "ME32:36", "ME36:40", "ME:40:44")
#
# howmanynas <- c()
# for(i in 1:dim(me_pvals)[1]){
#   howmanynas[i] <- length(which(is.na(me_pvals[i, ]) == T))
# }
#
# me_pvals <- me_pvals[which(howmanynas < 11), ]
# me_fold <- me_fold[which(howmanynas < 11), ]
keep <- match(rownames(mendota_meta), colnames(norm))
keep <- keep[which(is.na(keep) == F)]
me_norm <- norm[, keep]
me_norm <- me_norm[which(rowSums(me_norm) > 0), ]
# assign(paste("me_pvals", j, sep = ""), me_pvals)
# assign(paste("me_fold", j, sep = ""), me_fold)
assign(paste("me_norm", j, sep = ""), me_norm)
print(paste("Mendota", j))
}
sp_norm <- rbind(sp_norm1, sp_norm2, sp_norm3, sp_norm4, sp_norm5, sp_norm6, sp_norm7, sp_norm8, sp_norm9, sp_norm10, sp_norm11, sp_norm12, sp_norm13, sp_norm14, sp_norm15, sp_norm16, sp_norm17, sp_norm18)
tb_norm <- rbind(tb_norm1, tb_norm2, tb_norm3, tb_norm4, tb_norm5, tb_norm6, tb_norm7, tb_norm8, tb_norm9, tb_norm10, tb_norm11, tb_norm12, tb_norm13, tb_norm14, tb_norm15, tb_norm16, tb_norm17, tb_norm18)
me_norm <- rbind(me_norm1, me_norm2, me_norm3, me_norm4, me_norm5, me_norm6, me_norm7, me_norm8, me_norm9, me_norm10, me_norm11, me_norm12, me_norm13, me_norm14, me_norm15, me_norm16, me_norm17, me_norm18)
write.csv(sp_norm, file = "D:/GEODES_mapping_summaries/Sparkling_normalized_counts_2017-06-20.csv")
write.csv(tb_norm, file = "D:/GEODES_mapping_summaries/TroutBog_normalized_counts_2017-06-20.csv")
write.csv(me_norm, file = "D:/GEODES_mapping_summaries/Mendota_normalized_counts_2017-06-20.csv")
library(WGCNA)
allowWGCNAThreads()
snorm <- read.csv("D:/GEODES_mapping_summaries/Sparkling_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
tnorm <- read.csv("D:/GEODES_mapping_summaries/TroutBog_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
mnorm <- read.csv("D:/GEODES_mapping_summaries/Mendota_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
quantile(rowSums(snorm), .75)
quantile(rowSums(tnorm), .75)
quantile(rowSums(mnorm), .75)
snorm <- snorm[which(rowSums(snorm) > quantile(rowSums(snorm), .75)), ]
tnorm <- tnorm[which(rowSums(tnorm) > quantile(rowSums(tnorm), .75)), ]
mnorm <- mnorm[which(rowSums(mnorm) > quantile(rowSums(mnorm), .75)), ]
mnorm <- read.csv("D:/GEODES_mapping_summaries/Mendota_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
mnorm <- mnorm[which(rowSums(mnorm) > quantile(rowSums(mnorm), .75)), ]
sampletree <- hclust(dist(t(snorm)), method = "average")
plot(sampletree, main = "Sparkling", sub = "", xlab = "")
sampletree <- hclust(dist(t(tnorm)), method = "average")
plot(sampletree, main = "Trout", sub = "", xlab = "")
clust <- cutreeStatic(sampletree, cutHeight = 1500000, minSize = 10)
table(clust)
keepSamples <- (clust == 1)
tnorm <- tnorm[, keepSamples]
sampletree <- hclust(dist(t(mnorm)), method = "average")
plot(sampletree, main = "Mendota", sub = "", xlab = "")
clust <- cutreeStatic(sampletree, cutHeight = 1100000, minSize = 10)
clust
clust <- cutreeStatic(sampletree, cutHeight = 110000, minSize = 10)
clust
tnorm <- t(tnorm)
mnorm <- t(mnorm)
snorm <- t(snorm)
dim(tnorm)
dim(snorm)
dim(mnorm)
options(stringsAsFactors = FALSE)
lottery <- sample(1:dim(tnorm)[2], 1000, replace = F)
tpowers <- c()
for(i in 1:100){
lottery <- sample(1:dim(tnorm)[2], 1000, replace = F)
sft = pickSoftThreshold(tnorm[, lottery], verbose = 3, blockSize = 100, RsquaredCut = 0.7)
tpowers[i] <- sft$powerEstimate
}
tpowers
hist(tpowers)
mean(tpowers)
median(tpowers)
mode(tpowers)
sft = pickSoftThreshold(tnorm[, lottery], verbose = 1, blockSize = 100, RsquaredCut = 0.7)
sft = pickSoftThreshold(tnorm[, lottery], verbose = 0, blockSize = 100, RsquaredCut = 0.7)
tpowers <- c()
for(i in 1:100){
lottery <- sample(1:dim(tnorm)[2], 2000, replace = F)
sft = pickSoftThreshold(tnorm[, lottery], verbose = 0, blockSize = 100, RsquaredCut = 0.7)
tpowers[i] <- sft$powerEstimate
}
tpowers
hist(tpowers)
mean(tpowers)
median(tpowers)
spowers <- c()
for(i in 1:100){
lottery <- sample(1:dim(snorm)[2], 2000, replace = F)
sft = pickSoftThreshold(snorm[, lottery], verbose = 0, blockSize = 100, RsquaredCut = 0.7)
spowers[i] <- sft$powerEstimate
}
hist(spowers)
mean(spowers)
median(spowers)
mpowers <- c()
for(i in 1:100){
lottery <- sample(1:dim(mnorm)[2], 2000, replace = F)
sft = pickSoftThreshold(mnorm[, lottery], verbose = 0, blockSize = 100, RsquaredCut = 0.7)
mpowers[i] <- sft$powerEstimate
}
hist(mpowers)
mean(mpowers)
median(mpowers)
as.integers(min(ncol(tnorm)/20, 100*ncol(tnorm)/20000))
as.integer(min(ncol(tnorm)/20, 100*ncol(tnorm)/20000))
trout_net <- blockwiseModules(tnorm, maxBlockSize = 20000, power = 3, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 10, numericLabels = T, nThreads = 8, verbose = 3)
trout_net <- blockwiseModules(tnorm, maxBlockSize = 10000, power = 3, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 10, numericLabels = T, nThreads = 8, verbose = 3)
trout_net <- blockwiseModules(tnorm, maxBlockSize = 5000, power = 3, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 10, numericLabels = T, nThreads = 8, verbose = 3)
trout_net <- blockwiseModules(tnorm, maxBlockSize = 30000, power = 3, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 10, numericLabels = T, nThreads = 8, verbose = 3)
trout_net <- blockwiseModules(tnorm, maxBlockSize = 25000, power = 3, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 10, numericLabels = T, nThreads = 8, verbose = 3)
trout_net <- blockwiseModules(tnorm, maxBlockSize = 27000, power = 3, loadTOM = F, saveTOMs = F, networkType = "signed", minModuleSize = 10, numericLabels = T, nThreads = 8, verbose = 3)
library(ggplot2)
library(reshape2)
library(cowplot)
library(OTUtable)
# Load data
metadata <- read.csv(file = "C:/Users/Alex/Desktop/geodes/analyses/04R_calculations/sample_metadata.csv", header = T, row.names = 1)
genekey <- read.table(file = "D:/GEODES_mapping_summaries/GEODES_genekey_2017-06-26.txt", header = F, sep = "", quote = "", fill = T, colClasses = c("character"))
MAG_data <- read.csv(file = "C:/Users/Alex/Desktop/geodes/analyses/03process_mapping_results/Readme.csv", header = T, row.names = 1)
snorm <- read.csv("D:/GEODES_mapping_summaries/Sparkling_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
tnorm <- read.csv("D:/GEODES_mapping_summaries/TroutBog_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
mnorm <- read.csv("D:/GEODES_mapping_summaries/Mendota_normalized_counts_2017-06-20.csv", header = T, row.names = 1)
spvals <- read.csv("D:/GEODES_mapping_summaries/Sparkling_pvalues_2017-06-20.csv", header = T, row.names = 1)
tpvals <- read.csv("D:/GEODES_mapping_summaries/TroutBog_pvalues_2017-06-20.csv", header = T, row.names = 1)
mpvals <- read.csv("D:/GEODES_mapping_summaries/Mendota_pvalues_2017-06-20.csv", header = T, row.names = 1)
sfold <- read.csv("D:/GEODES_mapping_summaries/Sparkling_foldchange_2017-06-20.csv", header = T, row.names = 1)
tfold <- read.csv("D:/GEODES_mapping_summaries/TroutBog_foldchange_2017-06-20.csv", header = T, row.names = 1)
mfold <- read.csv("D:/GEODES_mapping_summaries/Mendota_foldchange_2017-06-20.csv", header = T, row.names = 1)
spvals_abun <- spvals[which(rowSums(snorm) > quantile(rowSums(snorm), 0.9)), ]
spvals_bin <- spvals_abun < 0.05
spvals_bin <- spvals_bin[which(rowSums(spvals_bin) > 0), ]
spvals_bin <- spvals_bin*1
sparkling_kmeans <- kmeans(spvals_bin, centers = 20)
mpvals_abun <- mpvals[which(rowSums(mnorm) > quantile(rowSums(mnorm), 0.9)), ]
mpvals_bin <- mpvals_abun < 0.05
mpvals_bin <- mpvals_bin[which(rowSums(mpvals_bin) > 0), ]
mpvals_bin <- mpvals_bin*1
mendota_kmeans <- kmeans(mpvals_bin, centers = 20)
tpvals_abun <- tpvals[which(rowSums(tnorm) > quantile(rowSums(tnorm), 0.9)), ]
tpvals_bin <- tpvals_abun < 0.05
tpvals_bin <- tpvals_bin[which(rowSums(tpvals_bin) > 0), ]
tpvals_bin <- tpvals_bin*1
trout_kmeans <- kmeans(tpvals_bin, centers = 20)
# Plot information about clusters
# What is the trend of each cluster?
for(i in 1:20){
# get read counts
cluster_members <- names(sparkling_kmeans$cluster[which(sparkling_kmeans$cluster == i)])
cluster_abundances <- snorm[match(cluster_members, rownames(snorm)), ]
# z-score normalize
z_abun <- zscore(cluster_abundances)
# make long dataset for ggplot
z_long <- melt(z_abun)
#switch sample names to timpoints
z_long$Timepoint <- metadata$Timepoint[match(z_long$Var2, rownames(metadata))]
#Plot as line graph
p <- ggplot(z_long, aes(x = Timepoint, y = value, group = Var1)) + geom_point(alpha = 0.2) + stat_summary(aes(group = NULL), fun.y = mean, geom = "line", color = "blue") + labs(y = "Normalized read count", title = paste("Sparkling Cluster", i))
assign(paste("p", i, sep = ""), p)
}
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, nrow = 5)
for(i in 1:20){
# get read counts
cluster_members <- names(mendota_kmeans$cluster[which(mendota_kmeans$cluster == i)])
cluster_abundances <- mnorm[match(cluster_members, rownames(mnorm)), ]
# z-score normalize
z_abun <- zscore(cluster_abundances)
# make long dataset for ggplot
z_long <- melt(z_abun)
#switch sample names to timpoints
z_long$Timepoint <- metadata$Timepoint[match(z_long$Var2, rownames(metadata))]
#Plot as line graph
p <- ggplot(z_long, aes(x = Timepoint, y = value, group = Var1)) + geom_point(alpha = 0.2) + stat_summary(aes(group = NULL), fun.y = mean, geom = "line", color = "blue") + labs(y = "Normalized read count", title = paste("Mendota Cluster", i))
assign(paste("p", i, sep = ""), p)
}
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, nrow = 5)
for(i in 1:20){
# get read counts
cluster_members <- names(trout_kmeans$cluster[which(trout_kmeans$cluster == i)])
cluster_abundances <- tnorm[match(cluster_members, rownames(tnorm)), ]
# z-score normalize
z_abun <- zscore(cluster_abundances)
# make long dataset for ggplot
z_long <- melt(z_abun)
#switch sample names to timpoints
z_long$Timepoint <- metadata$Timepoint[match(z_long$Var2, rownames(metadata))]
#Plot as line graph
p <- ggplot(z_long, aes(x = Timepoint, y = value, group = Var1)) + geom_point(alpha = 0.2) + stat_summary(aes(group = NULL), fun.y = mean, geom = "line", color = "blue") + labs(y = "Normalized read count", title = paste("Trout Cluster", i))
assign(paste("p", i, sep = ""), p)
}
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, nrow = 5)
mnorm_genomes <- genekey$V2[match(rownames(mnorm), genekey$V1)]
uniq_mnorm_genomes <- unique(mnorm_genomes)
mnorm_genome_table <- mnorm[which(mnorm_genomes == "pFN18A_DNA_transcript"),]
for(i in 1:length(uniq_mnorm_genomes)){
new_row <- rowSums(mnorm[which(mnorm_genomes == uniq_mnorm_genomes[i]), ])
mnorm_genome_table <- rbind(mnorm_genome_table, new_row)
}
mnorm_genome_table <- mnorm_genome_table[2:dim(mnorm_genome_table)[1],]
rownames(mnorm_genome_table) <- uniq_mnorm_genomes
mnorm_genome_table <- mnorm_genome_table[which(rownames(mnorm_genome_table) != "pFN18A_DNA_transcript"),]
m_genomes <- mnorm_genome_table[which(rowSums(mnorm_genome_table) > quantile(rowSums(mnorm_genome_table), 0.75)),]
#Keep only the maximum for each row
max_time1 <- c()
max_value1 <- c()
max_time2 <- c()
max_value2 <- c()
for(i in 1:dim(m_genomes)[1]){
max1 <- which(m_genomes[i, ] == max(m_genomes[i, 1:17]))
#print(length(max1))
if(length(max1) == 1){
max_time1[i] <- colnames(m_genomes)[max1]
max_value1[i] <- m_genomes[i, max1]
}else{
max1 <- max1[1]
max_time1[i] <- colnames(m_genomes)[max1]
max_value1[i] <- m_genomes[i, max1]
}
max2 <- which(m_genomes[i, ] == max(m_genomes[i, 18:31]))
#print(length(max2))
if(length(max2) == 1){
max_time2[i] <- colnames(m_genomes)[max2]
max_value2[i] <- m_genomes[i, max2]
}else{
max2 <- max2[1]
max_time2[i] <- colnames(m_genomes)[max2]
max_value2[i] <- m_genomes[i, max2]
}
}
max_time <- c(max_time1, max_time2)
max_value <- c(max_value1, max_value2)
max_genomes <- rep(rownames(m_genomes), 2)
me_max <- data.frame(max_genomes, max_time, max_value)
colnames(me_max) <- c("Genome", "Sample", "ReadCount")
me_max$Timepoint <- metadata$Timepoint[match(me_max$Sample, rownames(metadata))]
me_max$Genome <- factor(me_max$Genome, levels = me_max$Genome[order(me_max$Timepoint[1:65])])
me_max$Class <- MAG_data$Class[match(me_max$Genome, rownames(MAG_data))]
me_max$Order <- MAG_data$Order[match(me_max$Genome, rownames(MAG_data))]
me_max$Phylum <- MAG_data$Phylum[match(me_max$Genome, rownames(MAG_data))]
ggplot(me_max, aes(x = Timepoint, y = Genome, size = log(ReadCount), color = Phylum)) + geom_point() + scale_color_brewer(palette = "Set1")
whos_there("Mendota", 6)
whos_there <- function(lake, cluster_number){
if(lake == "Sparkling"){
results <- sparkling_kmeans
}else if(lake == "Mendota"){
results <- mendota_kmeans
}else{
results <- trout_kmeans
}
cluster_members <- names(results$cluster[which(results$cluster == cluster_number)])
output <- genekey[match(cluster_members, genekey$V1), ]
print(output)
}
whos_there("Mendota", 6)
whos_there("Trout", 9)
whos_there("Trout", 4)
