metaT_table <- read.table("C:/Users/amlin/Desktop/geodes/analyses/03process_mapping_results/GEODES_genes_2017-02-27.txt", row.names=1, header = T, fill = NA)
metaT_table <- metaT_table[, 1:72]
metaT_table <- metaT_table[which(rowSums(metaT_table) > 0), ]
colnames(metaT_table) <- substr(colnames(metaT_table), start = 1, stop = 9)
gene_metadata <- read.csv("C:/Users/amlin/Desktop/geodes/analyses/05R_calculations/gene_metadata_2017-02-28.csv")
sample_metadata <- read.csv("C:/Users/amlin/Desktop/geodes/analyses/05R_calculations/sample_metadata.csv")
#Normalize by internal standard
std <- metaT_table[which(rownames(metaT_table) == "pFN18A_DNA_transcript"), ]
std.percent <- std/colSums(metaT_table)*100
std.percent <- melt(std.percent)
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
allowWGCNAThreads()
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
library(WGCNA)
allowWGCNAThreads()
tnorm <- read.csv(file.choose(), header = T, row.names = 1)
sampletree <- hclust(dist(t(tnorm)), method = "average")
plot(sampletree, main = "Sample clustering to detect outliers", sub = "", xlab = "")
metadata <- read.csv(file = "C:/Users/amlin/Desktop/geodes/analyses/05R_calculations/sample_metadata.csv", header = T, row.names = 1)
metadata <- read.csv(file = "C:/Users/amlin/Desktop/geodes/analyses/04R_calculations/sample_metadata.csv", header = T, row.names = 1)
metadata$condition <- paste(metadata$Lake, metadata$Timepoint, sep = ";")
head(metadata)
trout_meta <- metadata[which(metadata$Lake == "Trout"), ]
match(colnames(tnorm), rownames(trout_meta))
keep <- match(colnames(tnorm), rownames(trout_meta))
keep <- keep[which(is.na(keep) == F)]
tnorm <- tnorm[, keep]
tnorm <- tnorm[which(rowSums(tnorm) > 0), ]
sampletree <- hclust(dist(t(tnorm)), method = "average")
plot(sampletree, main = "Sample clustering to detect outliers", sub = "", xlab = "")
nGenes <- nrow(tnorm)
nSamples <- ncol(tnorm)
tnorm_clean <- t(tnorm)
options(stringsAsFactors = FALSE)
increments <- seq(1, dim(tnorm)[1], 1000)
head(increments)
i = 2
seq[(i-1):i]
seq[1:2]
seq[i-1]:seq[i]
seq[1]
increments[i-1]:increments[i]]
increments[i-1]:increments[i]
sft = pickSoftThreshold(tnorm_clean[increments[i-1]:increments[i], ], verbose = 3, blockSize = 100)
sft = pickSoftThreshold(tnorm_clean[, increments[i-1]:increments[i]], verbose = 3, blockSize = 100)
sft
sft = pickSoftThreshold(tnorm_clean[, increments[i-1]:increments[i]], verbose = 3, blockSize = 100, RsquaredCut = 0.8)
sft
tpowers <- c()
tpowers[i-1] <- sft$powerEstimate
tpowers
tpowers <- c()
for(i in 2:length(increments)){
sft = pickSoftThreshold(tnorm_clean[, increments[i-1]:increments[i]], verbose = 3, blockSize = 100, RsquaredCut = 0.7)
tpowers[i-1] <- sft$powerEstimate
}
hist(tpowers)
mean(tpowers)
mode(tpowers)
tpowers
